<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图论学习笔记2——拓扑排序（作业表5 part 1）</title>
    <link href="/2024/01/30/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E2%80%94%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A85-part-1%EF%BC%89/"/>
    <url>/2024/01/30/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E2%80%94%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A85-part-1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="定义">定义</h1><p>很多的时候，做一件事情需要完成前面的一些事情后才能进行。就比如说数学证明，有的结论要用前面证明出来的结论再证明这个结论，而这个结论又会拿去证明其他的结论。这个证明的顺序就是<strong>拓扑序</strong>，求解方法就是<strong>拓扑排序</strong>。这个证明的顺序我们可以抽象成一个图论问题，如果当一个事件<span class="math inline">\(u\)</span> 要在事件 <spanclass="math inline">\(v\)</span> 之前完成，我们就可以再 <spanclass="math inline">\(u,v\)</span>之间连一条<strong>单向边</strong>。显然，我们建出来的这个图一定是个<strong>有向无环图（DAG）</strong>，因为如果有环了，那么就类似于数学中的循环论证，是肯定完成不了环中的事件的。目前主流的解法有两种：BFS和 DFS。这里介绍 BFS 写法。</p><h1 id="做法">做法</h1><h2 id="bfs">BFS</h2><p>当一个点的入度为 <span class="math inline">\(0\)</span>时，这个点显然就是可以被选择地，我们可以从这个点出发，将从这个点出发的所有边删掉，然后再找入度为<span class="math inline">\(0\)</span> 的点，依次类推。</p><p>正确性：因为每一次选择的都是可以选择的点，正确性也一定正确。</p><h2 id="dfs">DFS</h2><p>（没学过，好像也没怎么用过）</p><h1 id="例题">例题</h1><h2 id="b-hnoi2015-菜肴制作">B [HNOI2015] 菜肴制作</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2678&amp;tid=B">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P3243">LinkLuogu</a></p><p>题意简述：就是求拓扑序，不过要求数字越小的位置越靠前。</p><h3 id="思考">思考</h3><p>很明显，最小的字典序不一定是最优解，因为小的前面可能被很多大的所约束，这时最小字典序就不是最优解。</p><p>但是，我们可以建反图，用反图跑出来的<strong>最大</strong>字典序反着来就是答案。因为我们是反着来跑拓扑的，所以里面较小的数一定是相较于其他是更靠后出现的，反转后就是最先出现的，所以这样跑就是最优答案，最后判一下有没有环就行了。</p><h3 id="ac-code">AC code</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll d<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>ll next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>ll elast<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>ll<span class="token operator">></span>mm<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>ll<span class="token operator">></span>q<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>anss<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>anss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anss<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>anss<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>anss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>d<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>elast<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>elast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mm<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Impossible!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="c-poi2015-pus-pustynia">C [POI2015] PUS (Pustynia)</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2678&amp;tid=C">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P3588">LinkLuogu</a></p><p>题意简述：给定一个长度为 <span class="math inline">\(n\)</span>的序列，其中一些有数值，再给定其中 <spanclass="math inline">\(m\)</span> 个区间，其中每个区间有 <spanclass="math inline">\(k\)</span>个数，大小大于该区间任何的其他的数，构造一个这样的序列或判断无解（<spanclass="math inline">\(1\leq n \leq 10^5,1 \leq m \leq 2 \times 10^5,\sumk \leq 3 \times 10^5\)</span>）。</p><h3 id="思考-1">思考</h3><p>有点像差分约束（<del>好像就是差分约束</del>），就按差分约束的套路来，大的向小的连边，一条有向边就是一个大小关系，显然无解的情况就是这个大小关系有环。然后跑拓扑排序。</p><p>但是如果暴力的建图，那么边的数量就会是 <spanclass="math inline">\(n^2\)</span> 级别，显然不可取，注意到本质上就是这<span class="math inline">\(k\)</span>个点指向他所在的区间，我们不妨将这 <spanclass="math inline">\(k\)</span>个点连向一个虚拟节点，然后再用这个节点连向这个区间，那么现在的问题就是怎么让这个虚拟节点和区间连边。我们可以注意到，有一个数据结构专门维护的就是线段，也就是线段树（线段树优化建图）。我们可以借鉴这个思路，建的点表示一段区间，那大的区间就要向小的区间连边，可以用线段树的方法维护，于是边的数量就降低到了<span class="math inline">\(n \log n\)</span>级别，再跑拓扑排序确定大小，最后如果位置有原值在检查是否相等就行了。</p><h3 id="ac-code-1">AC code</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">6e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll M<span class="token operator">=</span>N<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll maxid<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>ll next<span class="token punctuation">;</span>ll vr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll elast<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span><span class="token keyword">bool</span> vr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>vr<span class="token operator">=</span>vr<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> SegmentTree <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span> <span class="token punctuation">&#123;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Tree<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span>maxid<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxid<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add1</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll x<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add1</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add1</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add2</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>id<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add2</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add2</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> SegmentTree<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>ll<span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>maxid<span class="token operator">+</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1e9</span><span class="token operator">||</span>ans<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NIE"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll rans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll vs<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">bool</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>pre<span class="token operator">!=</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vs<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>val<span class="token operator">|=</span><span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> io <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token operator">=</span>buf<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token operator">=</span>buf<span class="token punctuation">,</span>obuf<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p3<span class="token operator">=</span>obuf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> p1<span class="token operator">==</span>p2<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token operator">=</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100005</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token constant">EOF</span><span class="token operator">:</span><span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token char">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span> f<span class="token operator">|=</span>ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">1ll</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">3ll</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> f<span class="token operator">?</span><span class="token operator">~</span>res<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> io<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll p<span class="token punctuation">,</span>d<span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>maxid<span class="token operator">+</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>maxid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">;</span>l<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token punctuation">,</span>i<span class="token operator">+</span>maxid<span class="token punctuation">,</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span>maxid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>maxid<span class="token operator">+</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token operator">|=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NIE"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>maxid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rans<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rans<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">!=</span>a<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>Tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NIE"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"TAK"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>rans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="附线段树优化建图">附：线段树优化建图</h3><p>线段树优化建图在我看来是一个优化区间建边的工具，能将 <spanclass="math inline">\(n^2\)</span> 级别的建边优化到 <spanclass="math inline">\(n \log n\)</span>级别，当建图方式跟区间有关，就可以用了，具体怎么用就跟上面一样，后面连通性专题也有一道要用线段树优化建图的。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dp学习笔记3——区间dp（作业表3总结）</title>
    <link href="/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E2%80%94%E5%8C%BA%E9%97%B4dp%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A83%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <url>/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E2%80%94%E5%8C%BA%E9%97%B4dp%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A83%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要针对于区间 dp 的总结。</p><p>比较拿手（感觉有一种抽象的无从下手但又很智慧的美）</p><h1 id="原理">原理</h1><p>对于一个大区间，如果我们可以解决他的子区间问题，并且答案还能合并到大区间里，那这个问题就可以用区间dp 解决。</p><p>就这么简单，但是扩展出去有亿点复杂。</p><h1 id="例题">例题</h1><h2 id="k-祖玛游戏">K 祖玛游戏</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2572&amp;tid=K">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P5189">LinkLougu</a></p><p>一道经典题目（也开始难了）。</p><p>首先，我们现设 <span class="math inline">\(dp_{i,j}\)</span>是消除区间 <code>[i,j]</code>所用的最小弹珠数，如果直接开始枚举断点，我们会发现两个区间可能会有多次的不相邻的消除，是比<span class="math inline">\(dp_{i,j}\)</span> 只消一次的结果更优。</p><p>我们考虑增加一个维度：设 <spanclass="math inline">\(dp_{i,j,k}\)</span> 是消除区间 <code>[i,j]</code>以及前面有 <span class="math inline">\(k\)</span>个相同的弹珠所用的最小弹珠数。</p><p>开始分类讨论：</p><ul><li>情况一：第 <span class="math inline">\(i\)</span> 个弹珠与第 <spanclass="math inline">\(i+1\)</span> 个弹珠颜色相同，那显然消除<code>[i,j]</code> 的弹珠花费比消除 <code>[i+1,j]</code> 的花费少 <spanclass="math inline">\(1\)</span>，所以 <spanclass="math inline">\(dp_{i,j,k}\)</span> 可以更新为 <spanclass="math inline">\(dp_{i+1,j,k+1}\)</span>。</li><li>情况二：我们在第 <span class="math inline">\(i\)</span>个弹珠的前面再放一个与其同色的弹珠，花费增加了 <spanclass="math inline">\(1\)</span>，所以 <spanclass="math inline">\(dp_{i,j,k}\)</span> 可以更新为 <spanclass="math inline">\(dp_{i,j,k+1}+1\)</span>。</li><li>情况三：我们考虑枚举一个断点 <spanclass="math inline">\(l\)</span>，如果说 <spanclass="math inline">\(l+1\)</span> 的颜色与 <spanclass="math inline">\(i\)</span> 的颜色相等，我们可以将区间<code>[i+1,l]</code> 的弹珠全部消完，再将 <spanclass="math inline">\(i\)</span> 与 <spanclass="math inline">\(l+1\)</span> 连接起来消，所以 <spanclass="math inline">\(dp_{i,j,k}\)</span> 可以被更新为 <spanclass="math inline">\(dp_{i+1,j,0}+dp_{l+1,j,l+1}\)</span>。</li></ul><p>注意要对 <span class="math inline">\(k = K - 1\)</span>时特殊处理，因为它在添加 <span class="math inline">\(1\)</span>个弹珠就可以消完了。</p><h3 id="ac-code">AC code</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll K<span class="token operator">=</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>kk<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[i,j],前跟k</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>kk<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>kk<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>kk<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll j<span class="token operator">=</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll l<span class="token operator">=</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//前跟多少</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况一</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对于 k-1 的特殊考虑</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况二</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll l_<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> l_<span class="token operator">&lt;</span>j<span class="token punctuation">;</span> l_<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>l_<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况三</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>l_<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="o-haoi2016字符合并">O [HAOI2016]字符合并</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2572&amp;tid=O">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P3736">LinkLougu</a></p><p>一道状压+区间。</p><p>我们看到一个叫<strong>合并</strong>的操作，很明显就想到了可以用区间dp 来做，而且 <span class="math inline">\(k\)</span>小的不能再小了，干脆直接枚举其合并后的状态（小于等于 <spanclass="math inline">\(k\)</span> 位，<spanclass="math inline">\(2^k\)</span> 就行）。</p><p>我们设 <span class="math inline">\(dp_{i,j,S}\)</span> 为<code>[i,j]</code> 区间合并后所得到的字符串为 <spanclass="math inline">\(S\)</span>的最大分数，然后有一个性质，见我之前写的<ahref="https://rqdyc.github.io/2023/11/25/Luogu-P3736-HAOI2016-字符合并-题解/">题解</a>，可以来进行优化，然后dp 方程就很简单了，如果说我要合并 <code>[i,k]</code> 和<code>[k,j]</code>，我就用 <code>[i,k]</code> 的状态合并<code>[k,j]</code> 的状态，然后因为 <code>[i,k]</code>的信息足够丰富了，我们就可以将 <code>[k,j]</code> 合并为了 <spanclass="math inline">\(1\)</span> 或 <spanclass="math inline">\(0\)</span> 的情况，效果都一样。然后长度到 <spanclass="math inline">\(k\)</span> 之后就可以合并为 <spanclass="math inline">\(1\)</span> 或 <spanclass="math inline">\(0\)</span>，要看其具体数值。</p><p>总体而言思维难度比 K 题简单太多。</p><h3 id="ac-code-1">AC code</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll K<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">bool</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">getsum</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>j<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span>j<span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">>=</span>i<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>q<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">wes</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">32</span><span class="token operator">-</span><span class="token function">__builtin_clz</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调试 </span>ll n<span class="token punctuation">,</span>kk<span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll str<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> tr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>kk<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>tr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll j<span class="token operator">=</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ll sizee<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sizee<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sizee<span class="token operator">=</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll l<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">>=</span>i<span class="token punctuation">;</span> l<span class="token operator">-=</span><span class="token punctuation">(</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sizee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sizee<span class="token operator">==</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//合并后的长度为1</span>ll r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//答案</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dp学习笔记2——背包（作业表2总结）</title>
    <link href="/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A82%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <url>/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A82%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要是针对于背包问题的 dp 总结。</p><h1 id="背包">0/1 背包</h1><p>有 <span class="math inline">\(n\)</span> 个物品，有两个属性：容积<span class="math inline">\(w_i\)</span> 和价值 <spanclass="math inline">\(v_i\)</span>，要放入一个大小为 <spanclass="math inline">\(W\)</span> 的容器，问最大价值。</p><p>设 <span class="math inline">\(dp_{i,j}\)</span> 为装了前 <spanclass="math inline">\(i\)</span> 个物品后总体积为 <spanclass="math inline">\(j\)</span> 的最大价值。那么原来是 <spanclass="math inline">\(dp_{i-1,j-v_i}\)</span>，选了这个物品后体积增加，变成了 <spanclass="math inline">\(dp_{i-1+1,j-v_i+v_i} =dp_{i,j}\)</span>，或者不选于是就有 dp 方程：</p><p><span class="math display">\[dp_{i,j}=\max(dp_{i-1,j},dp_{i-1,j-v_i})\]</span></p><p>我们发现第一维只用到了 <span class="math inline">\(i\)</span> 和<spanclass="math inline">\(i-1\)</span>，我们就可以将第一维交替滚动或者原地的滚动，简化为：</p><p><spanclass="math display">\[dp_{now,j}=\max(dp_{last,j},dp_{last,j-v_i})\]</span></p><p>或</p><p><span class="math display">\[dp_j=\max(dp_j,dp_{j-v_i})\]</span></p><p>总体复杂度 <span class="math inline">\(O(nW)\)</span>。</p><h1 id="完全背包">完全背包</h1><p>跟 0/1 背包很想，只不过可以选很多次，我们对 dp 公式稍加更改就行：</p><p><span class="math display">\[dp_{i,j}= \max(dp_{i-1,j},dp_{i-1,j-v_i\times c}+w_i \times c)(0 \le c \le \infty)\]</span></p><p>滚动也很简单，考虑顺序就行。</p><p>总体复杂度 <span class="math inline">\(O(nW)\)</span>。</p><h1 id="多重背包">多重背包</h1><p>前面两者的结合体，每个物品后 <span class="math inline">\(c_i\)</span>个，有以下三种方法：</p><h2 id="暴力">暴力</h2><p>将其每一个物品按照 0/1 背包考虑，总体复杂度 <spanclass="math inline">\(O(\sum c_iW)\)</span>。</p><h2 id="二进制分组">二进制分组</h2><p>我们发现将 <span class="math inline">\(c_i\)</span> 化成几个形如<span class="math inline">\(2^k\)</span> 的和的形式，最后也能够组合成<span class="math inline">\(0\)</span> 到 <spanclass="math inline">\(c_i\)</span> 的数，所以我们可以将每个 <spanclass="math inline">\(c_i\)</span> 分解，再 0/1 背包 dp。</p><p>时间复杂度为 <span class="math inline">\(O(\sum \log c_iW)\)</span>。</p><h2 id="单调队列">单调队列</h2><p>我们来看，每一次转移，我们都是使用如下 dp 方程：</p><p><span class="math display">\[dp_{i,j}=\max(dp_{i-1,j},dp_{i-1,j-v_ic}+w_ic)(0 \le c \le c_i)\]</span></p><p>我们不妨将 <span class="math inline">\(j\)</span> 记为 <spanclass="math inline">\(pv_i+d\)</span>，而它在每一次转移中，都是转移的<span class="math inline">\(j- v_ic\)</span>，那么这个转移的数对 <spanclass="math inline">\(v_i\)</span> 满足 <spanclass="math inline">\((j-v_ic) \equiv (pv_i+d-cv_i) \equiv d(\bmod\v_i)\)</span>。</p><p>有了这个性质，我们可以枚举他的余数，然后每次依次加 <spanclass="math inline">\(v\)</span>来枚举要更新的，然后发现他能够更新到的区间只有那么一部分（依托于 <spanclass="math inline">\(c_i\)</span>），而且是一个连续的，有增有减的操作，我们就可以用单调队列来进行优化最大值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> v <span class="token operator">>></span> w <span class="token operator">>></span> c<span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> m <span class="token operator">/</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ll head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> v<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> c <span class="token operator">></span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                head<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> j <span class="token operator">*</span> v<span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">*</span> w <span class="token operator">>=</span> last_dp<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                tail<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            last_dp<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> j <span class="token operator">*</span> v<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>k <span class="token operator">+</span> j <span class="token operator">*</span> v<span class="token punctuation">]</span> <span class="token operator">=</span> last_dp<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> w<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dp学习笔记1——LCS &amp; LIS（作业表1总结）</title>
    <link href="/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94LIS-LCS%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A81%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <url>/2024/01/12/dp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94LIS-LCS%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A81%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="lis">LIS</h1><p>全名最长上升子序列。</p><h2 id="做法一">做法一</h2><p>设 <span class="math inline">\(dp_i\)</span> 为字符串 <spanclass="math inline">\(a\)</span> 中以 <spanclass="math inline">\(a_i\)</span> 结尾的 LIS，当前的 <spanclass="math inline">\(dp_i\)</span> 肯定要从比他小的地方枚举，所以 dp方程可以简单推出来：</p><p><span class="math display">\[dp_i = \max (1,dp_j+1)\ (i &gt; j,a_i&gt; a_j)\]</span></p><p>枚举两维，时间复杂度 <spanclass="math inline">\(O(n^2)\)</span>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="做法二">做法二</h2><p>考虑修改做法一，我们发现上述 dp方程是一个<strong>二位偏序</strong>问题，所以考虑用树状数组来优化。每次去寻找比当前字符更小的最大<span class="math inline">\(dp\)</span> 值。</p><p>第二维用树状数组优化掉了，时间复杂度 <span class="math inline">\(O(n\log n)\)</span>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getmax</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//树状数组优化</span>    <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="做法三">做法三</h2><p>考虑另一种做法，设 <span class="math inline">\(dp_i\)</span> 为长度为<span class="math inline">\(i\)</span> 的 LIS中最后出现的最小的值，显然其具有单调性。对于 <spanclass="math inline">\(a\)</span>的每一个字符，我们可以二分找到比其大的第一个，然后用这个字符去更新。</p><p>有一个二分查找的过程，时间复杂度 <span class="math inline">\(O(n \logn)\)</span>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>dp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="lcs">LCS</h1><p>全名最长公共子序列。</p><h2 id="做法一-1">做法一</h2><p>设 <span class="math inline">\(dp_{i,j}\)</span> 为两个串 <spanclass="math inline">\(a,b\)</span> 其中 <spanclass="math inline">\(a\)</span> 的前 <spanclass="math inline">\(i\)</span> 个字符串与 <spanclass="math inline">\(b\)</span> 的前 <spanclass="math inline">\(j\)</span>个字符串的最长上升子序列，要么相等或不相等，所以 dp 递推式就为：</p><p><span class="math display">\[dp_{i,j} = \begin{cases}   dp_{i-1,j-1} + 1\ (a_i = b_j)   \\   \max(dp_{i-1,j},dp_{i,j-1})\ (a_i  \neq b_j)\end{cases}\]</span></p><p>同样是枚举两维，时间复杂度 <spanclass="math inline">\(O(n^2)\)</span>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="做法二-1">做法二</h2><p><span class="math inline">\(O(n \log n)\)</span> 做法：</p><p>我们考虑将其转化为 LIS 来做。</p><p>我们将串 <span class="math inline">\(a\)</span>里的每个元素按顺序依次编号，那么我们不妨假设其 LCS 为 <spanclass="math inline">\(c\)</span>。那么 <spanclass="math inline">\(c\)</span> 的元素按照编号重新计算就是一个IS，那么我们将 <span class="math inline">\(b\)</span>的元素重新编号，找到其中的 IS，它在 <spanclass="math inline">\(a\)</span> 中也必定存在一个 IS与之对应且是其转换后的字符为之前的CS。所以我们只需要将其离散化重新编号后在 <spanclass="math inline">\(b\)</span> 串里找其 LIS 即可求出答案。</p><p>时间复杂度同 LIS 做法二或三，<span class="math inline">\(O(n \logn)\)</span>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    last<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>last<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//离散化</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e17</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>dp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//LIS 做法三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024.1.6 本部月考总结</title>
    <link href="/2024/01/07/2024-1-6-%E6%9C%AC%E9%83%A8%E6%9C%88%E8%80%83%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/07/2024-1-6-%E6%9C%AC%E9%83%A8%E6%9C%88%E8%80%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>考的不好。</p><h1 id="a-过关斩将">A 过关斩将</h1><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2661&amp;tid=A">LinkNKOJ</a></p><p>学了快一个月最短路，见到这种裸的分层图题，轻松就切了。</p><p>具体思路：Dijkstra 跑分层图，根据弱点类型来看更新哪一层。</p><h2 id="ac-code">AC code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>ll next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll elast<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>z<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll T<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>string op<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">;</span>ll dis<span class="token punctuation">;</span>ll opt<span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span>ll x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ll dis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ll opt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dis</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">opt</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">cmp</span> <span class="token punctuation">&#123;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>dis<span class="token operator">></span>b<span class="token punctuation">.</span>dis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ll dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>xx<span class="token punctuation">;</span>ll <span class="token function">types</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token char">'M'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token char">'L'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token char">'R'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>ll st<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>priority_queue<span class="token operator">&lt;</span>node<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token punctuation">,</span>cmp<span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1e17</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll trp<span class="token operator">=</span><span class="token function">types</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>st<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>trp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>trp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>trp<span class="token punctuation">]</span><span class="token punctuation">,</span>trp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>opter<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>opt<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dis<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>opty<span class="token operator">=</span><span class="token function">types</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>opty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token punctuation">,</span>opter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll ropt<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>opter<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ropt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>ropt<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>ropt<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">+</span>xx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>ropt<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">+</span>xx<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>ropt<span class="token punctuation">]</span><span class="token punctuation">,</span>ropt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>opty<span class="token operator">==</span>opter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token punctuation">,</span>opter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opty<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">+</span>xx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opty<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>opter<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">+</span>xx<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>opty<span class="token punctuation">]</span><span class="token punctuation">,</span>opty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>T<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>elast<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>elast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>s<span class="token operator">>></span>t<span class="token operator">>></span>xx<span class="token punctuation">;</span>cin<span class="token operator">>></span>op<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>z<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dijkstra</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="b-翻转游戏">B 翻转游戏</h1><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2661&amp;tid=B">LinkNKOJ</a></p><p>赛上有想出来接近正解的思路，但是被我 <del>IQ=0</del>的大脑否决了（也告诉我们做事要有决心）。</p><p>思路：当 <span class="math inline">\(k\)</span>为偶数是，显然是没有答案的（消除总和为 <span class="math inline">\(S_n =2^n - 1\)</span>），当 <span class="math inline">\(k\)</span>是奇数时，消除的次数就为 <span class="math inline">\(T = \lceil\log_2{n} \rceil\)</span>，我们记录当前<strong>从第 <spanclass="math inline">\(T\)</span> 次开始</strong>的消除次数为 <spanclass="math inline">\(t\)</span>，只包含 <spanclass="math inline">\(1\)</span> 的区间左右端点为 <spanclass="math inline">\([l,r]\)</span>。当 <spanclass="math inline">\(2^{T - t + 1} \leq r - l + 1\)</span>时，我们就可以直接消掉这个区间的一部分，我们就以左端点 <spanclass="math inline">\(l\)</span> 为起点去消掉一部分 <spanclass="math inline">\(1\)</span>；否则我们不仅要消完整个区间，还要将外面的一些<span class="math inline">\(0\)</span> 给化成 <spanclass="math inline">\(1\)</span>，为了不受 <spanclass="math inline">\(r\)</span> 端点后面可能没有 <spanclass="math inline">\(0\)</span>，我们就从右端点 <spanclass="math inline">\(r\)</span> 来开始消除。最后再将新的 <spanclass="math inline">\([l,r]\)</span> 更新出来，继续这个过程。</p><h2 id="ac-code-1">AC code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">*=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">*=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">getlog</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll T<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span><span class="token number">1145</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>T<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ll l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span>ll times<span class="token operator">=</span><span class="token function">getlog</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">getlog</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>ll rtime<span class="token operator">=</span>times<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>times<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>times<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">>=</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">;</span>l<span class="token operator">+=</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token operator">-</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>ll befl<span class="token operator">=</span>l<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">-</span><span class="token function">qpow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span>befl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>rtime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="c-大模法师">C 大模法师</h1><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2661&amp;tid=C">LinkNKOJ</a></p><p>考场上想正解想不出来，就开始乱搞，结果正解居然也是乱搞。</p><p>思路：有很多乱搞思路能过，这里介绍一种。</p><p>我们随机从 <span class="math inline">\(a\)</span>序列里找两个<strong>不相等</strong>的数，记作 <spanclass="math inline">\(a_l\)</span> 和 <spanclass="math inline">\(a_r\)</span>，假设这两个数对于序列中某个数同余，我们不妨对两个数换一种方式记录，记<span class="math inline">\(a_l = l&#39;x + y\)</span>，<spanclass="math inline">\(a_r = r&#39;x + y\)</span>，则两数之差就为 <spanclass="math inline">\((l&#39; - r&#39;)x\)</span>，也就是等于 <spanclass="math inline">\(a_l - a_r\)</span>。我们就可以枚举这个 <spanclass="math inline">\(x\)</span>，当 <span class="math inline">\((a_l -a_r) \equiv 0\  (\bmod x)\)</span> 时，就说明 <spanclass="math inline">\(x\)</span> <strong>可能满足</strong>要求，我们再用<span class="math inline">\(O(n)\)</span>的时间去检查，如果是就更新答案。设进行了 <spanclass="math inline">\(T\)</span> 此操作，复杂度约为 <spanclass="math inline">\(O(Tn\sqrt{n})\)</span>，当然跑不满，加点优化就可以很快过掉。</p><h2 id="ac-code-2">AC code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll vis<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>mt19937 <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>botton<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>botton<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>ll rmax<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>botton<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>rmax<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>rmax<span class="token punctuation">,</span>botton<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rmax<span class="token operator">>=</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">100000</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll oo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> oo<span class="token operator">&lt;=</span><span class="token number">500</span><span class="token punctuation">;</span> oo<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">1200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll x<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll y<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>oo<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll sums<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span>sums<span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sums<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>botton<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll maxx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>botton<span class="token punctuation">[</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>maxx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>botton<span class="token punctuation">[</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>maxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxx<span class="token operator">>=</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxx<span class="token operator">>=</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span> i<span class="token operator">+=</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><del>这种抽象的题写不出正解也可以去乱搞一下，说不定就过了</del>。</p><h1 id="d-彩色的树">D 彩色的树</h1><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2661&amp;tid=D">LinkNKOJ</a></p><p>没怎么听懂，好像就是用 DFS 来考虑每个颜色的贡献。</p><h2 id="ac-code-3">AC code</h2><p><del>还没 AC 怎么可能有 AC code</del></p><h1 id="后记">后记</h1><p>要期末考试了，压力还是有点大，希望自己还是能够坚持下来，思维多练练，代码多敲点，套路多见见（最近也见了很多），希望考试和后面的时候能发挥出来。</p>]]></content>
    
    
    <categories>
      
      <category>学习总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论学习笔记1——最短路（作业表4总结）</title>
    <link href="/2023/12/30/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A84%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <url>/2023/12/30/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A84%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="算法">算法</h1><h2 id="floyd-warshall">Floyd-Warshall</h2><p>求全源最短路径。</p><span id="more"></span><p>流程：</p><p>设 <span class="math inline">\(dp_{k,i,j}\)</span> 为经过 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(k\)</span> 点的 <spanclass="math inline">\(i,j\)</span>之间的最短路，每次转移找一个新的未被转移过的点转移，则有以下转移方程：</p><p><span class="math display">\[dp_{k,i,j} = dp_{k-1,i,k} +dp_{k-1,k,j}\]</span></p><p>可以滚动掉一维，设 <span class="math inline">\(dp_{i,j}\)</span> 为<span class="math inline">\(i,j\)</span> 之间的最短路，于是就有：</p><p><span class="math display">\[dp_{i,j} = \min \limits_{1 \le k \le n}\{dp_{i,k} + dp_{k,j}\}\]</span></p><p><strong>注意：顺序为 <spanclass="math inline">\(k,i,j\)</span>，顺序可调换，循环 <spanclass="math inline">\(6\)</span> 次也能得出答案。</strong></p><p>时间复杂度 <span class="math inline">\(O(n^3)\)</span>。</p><h2 id="dijkstra">Dijkstra</h2><p>求单源最短路径。</p><p>本质：贪心+BFS+DP。</p><p>流程：</p><p>设起点为 <span class="math inline">\(s\)</span>，令 <spanclass="math inline">\(dis_i = +\infty(i \in n)\)</span>，并将 <spanclass="math inline">\(dis_s\)</span> 设为 <spanclass="math inline">\(0\)</span>。</p><p>每一次，寻找 <span class="math inline">\(n\)</span> 个点中 <spanclass="math inline">\(dis_i\)</span>的最小值，并用这个最小值去更新它周围的边。</p><p>正确性证明：在正权图中，以当前权值最小的点去更新其他点，令有一点去更新会更优而又不是权值最小的点，因为边权为正，他更新一个点所花的花费会大于一个更近且权值更小的点，所以应用权值更小的点去更新，矛盾，故得证。</p><p>时间复杂度 <span class="math inline">\(O(n^2)\)</span>（找最小点<span class="math inline">\(O(n)\)</span>，更新 <spanclass="math inline">\(n\)</span> 次 <spanclass="math inline">\(O(n)\)</span>）。</p><p>可以用优先队列来找 <span class="math inline">\(dis_i\)</span>的最小值，时间复杂度可以优化到 <span class="math inline">\(O(m \logm)\)</span>。</p><p><strong>注意：不能处理含有负权边的图。</strong></p><h2 id="bellman-ford">Bellman-Ford</h2><p>让起点 <span class="math inline">\(dis_s = 0\)</span>。对每个点进行<span class="math inline">\(n-1\)</span> 次松弛操作，可得到关于 <spanclass="math inline">\(s\)</span> 的单源最短路。</p><p>正确性证明：在图 <span class="math inline">\(G(V,E)\)</span>中，令一点 <span class="math inline">\(v \neq s\)</span> ，则到达 <spanclass="math inline">\(v\)</span> 的最短路至多经过 <spanclass="math inline">\(n-1\)</span> 个点，亦能通过 <spanclass="math inline">\(n-1\)</span> 次松弛（递推更新）去更新到点 <spanclass="math inline">\(v\)</span>，得证。</p><p>时间复杂度 <span class="math inline">\(O(nm)\)</span>。</p><p><strong>注意：可以处理含有负权边的图，且可以找负环。</strong></p><h2 id="spfa">SPFA</h2><p>是 Bellman-Ford 算法的优化。</p><p>由于每次松弛操作都会有很多的<strong>不必要</strong>的边被松弛，于是我们可以只松弛<strong>那些被松驰过了的点</strong>的边。</p><p>期望复杂度约为 <span class="math inline">\(O(kE)\)</span>，其中 <spanclass="math inline">\(k\)</span>是一个常数，但<strong>最坏</strong>复杂度为 <spanclass="math inline">\(O(nm)\)</span>（也就是退化为 Bellman-Ford算法）。</p><h1 id="例题">例题</h1><h2 id="c-usaco4.1.3fence-loops篱笆回路">C 【USACO4.1.3】FenceLoops篱笆回路</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2627&amp;tid=C">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P2738">LinkLuogu</a></p><p>这个题要求最小环，首先将点给离散化出来。要找最小环，因为数据范围很小，考虑Floyd-Warshall 算法，我们不妨正好在枚举 <spanclass="math inline">\(k\)</span> 的时候，因为 <spanclass="math inline">\(dp_{i,j}\)</span> 没有更新，所以当前的 <spanclass="math inline">\(dp_{i,k}+dp_{k,j}\)</span> 的路线肯定不会是 <spanclass="math inline">\(dp_{i,j}\)</span> 的路线（如下图），所以我们可以用<span class="math inline">\(dp_{i,j}+dp_{i,k}+dp_{k,j}\)</span>去更新最小环长度。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/xrjvuou0.png" /></p><p><a href="https://www.luogu.com.cn/record/139791257">AC code</a></p><h2 id="w-最短路">W 最短路</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2627&amp;tid=C">LinkNKOJ</a> and <ahref="https://codeforces.com/problemset/problem/1163/F">LinkCodeforces</a> anf <ahref="https://www.luogu.com.cn/problem/CF1163F">Link Luogu</a></p><p>本题求的是在正权图 <span class="math inline">\(G(V,E)\)</span>中，选择一条边并更新他的边权，并对于每个询问求其修改后 <spanclass="math inline">\(1 \to n\)</span> 的最短路。</p><p>不妨分类讨论：</p><ol type="1"><li>当这条被修改的边不在最短路上时，修改后的答案要么是原先的最短路，要么是从起点或终点到这条边的一端再从另一端出来的路径长度，因为如果我们考虑不经过这条边的路径长度，它们肯定是比原先求出的最短路要大，然后就只能考虑经过这条边。经过这条边显然最短的路径长度就是两端点到起点和终点的距离加上这条边自身的边权（如下图）。</li></ol><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/082xn1j8.png" /></p><ol start="2" type="1"><li><p>如果这条边本身就在最短路上：</p><ol type="1"><li>这条边比原来的边要短，那肯定最短路就是原来的最短路减去这条边现在比以前短的长度。</li><li>这条边比原来的边要长，这个有点难考虑，我会从以下方面说明：</li></ol><ul><li>引理一：在正权图 <span class="math inline">\(G(V,E)\)</span>中最短路一定是一条链。</li></ul><p>证明：最短路因为要保证最短性，且图是正权图，不可能有 <spanclass="math inline">\(0\)</span>环或负环，所以在最短路上一定不可能有环，得证。</p><ul><li>引理二：在正权图 <span class="math inline">\(G(V,E)\)</span>中，从起点 <span class="math inline">\(s\)</span> 出发，到达点 <spanclass="math inline">\(t\)</span>，则路径 <span class="math inline">\(s\to t\)</span> <strong>用 dijkstra 算法找到的最短路</strong>必与其他从<span class="math inline">\(s\)</span> 出发的路径共享一段前缀。</li></ul><p>证明：假设这条<strong>最短</strong>路径它的共享的前缀中间有间隔，且产生作用与原最短路相等。由于中间间隔的部分又回到了最短路上，所以更新后面的点就无须考虑。而且由于dijkstra 算法的特性，这种两条相等的最短路的终点 <spanclass="math inline">\(v\)</span>只会访问一次，而假设的情况确是两次，矛盾，得证。</p><ul><li>引理三：令集合 <span class="math inline">\(S\)</span>为最短路上的点的点集，则含有两个点的点集 <spanclass="math inline">\(S&#39; = \{u,v\}\)</span> 满足 <spanclass="math inline">\(S \cap S&#39; = \varnothing\)</span>，满足在 <spanclass="math inline">\(1 \to u\)</span>与最短路的前缀在最短路上的最后一个点和 <span class="math inline">\(v \ton\)</span>与最短路的后缀在最短路上的最后一个点中间的最短路上的边任删一条而它的删边最短路为<span class="math inline">\(dis_{1 \to u} + dis_{u \to v} + dis_{v \ton}\)</span>，如果有多个就取最小值。</li></ul><p>证明：由引理二得，假设在最短路上的最后一个前缀和最后一个后缀的点分别记作<span class="math inline">\(x,y\)</span>。那么，假设有一条边 <spanclass="math inline">\((o,p)\)</span>删掉之后所根据引理三得出的答案是比正确答案更大的。那么一定有一条路径<span class="math inline">\(1 \to u_1 \to v_1 \to n\)</span>原来中间的最短路上的边并不经过 <spanclass="math inline">\((o,p)\)</span>但是有另一条路径使其从该路径中脱离出来并回到最短路时中间是有 <spanclass="math inline">\((o,p)\)</span>边的，并且答案肯定是最小的，那么这条路径肯定存在一条边，满足其与最短路上的前缀和后缀中间必经过<spanclass="math inline">\((o,p)\)</span>，而后用其去更新答案一定比之前更优，而与之前的假设相悖，得证。</p><ul><li>引理四：引理三中所设的 <span class="math inline">\(\{u,v\}\)</span>可以在一条边上而引理三依旧成立。</li></ul><p>证明：可以用引理三的证明过程来证明。</p></li></ol><p>所以，综上所述，利用引理四，我们可以枚举每一条<strong>不在最短路上</strong>的边。然后因为其两点前后缀在同一最短路上且连续，我们可以给每条边编上号，用数据结构来维护其删掉这条边后路径长度的最小值。</p><p><ahref="https://codeforces.com/problemset/submission/1163/240331475">ACcode</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P3736 [HAOI2016] 字符合并 题解</title>
    <link href="/2023/11/25/Luogu-P3736-HAOI2016-%E5%AD%97%E7%AC%A6%E5%90%88%E5%B9%B6-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/11/25/Luogu-P3736-HAOI2016-%E5%AD%97%E7%AC%A6%E5%90%88%E5%B9%B6-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="传送门">传送门</h1><p><a href="https://www.luogu.com.cn/problem/P3736">传送门</a></p><h1 id="思路">思路</h1><p>题目要求一段数<strong>合并</strong>后的最大分数，看到合并，且 <spanclass="math inline">\(n\)</span> 的范围才 <spanclass="math inline">\(300\)</span>，自然的想到复杂度 <spanclass="math inline">\(O(n^3)\)</span> 的区间 dp。</p><p>注意到 <span class="math inline">\(k\)</span>的范围很小，我们就可以想到复杂度为 <spanclass="math inline">\(O(2^k)\)</span> 状压，状压字符当前的状态。</p><span id="more"></span><p>结合起来，<span class="math inline">\(dp_{i,j,s}\)</span> 表示区间<code>[i,j]</code> 合并后状态为 <spanclass="math inline">\(s\)</span>，有 <span class="math inline">\(O(n^32^k)\)</span> 的暴力，显然易见会超时，这时我们就要找合并的性质。</p><p>不妨假设一段长度为 <span class="math inline">\(t\)</span> 的<code>01</code> 序列，显然易见，当 <span class="math inline">\(t =k\)</span> 时，合并次数为 <span class="math inline">\(1\)</span>。</p><p>假设合并完一次后，得到的长度为 <spanclass="math inline">\(1\)</span>，如果再想合并一次，就要让合并完后的长度<span class="math inline">\(1\)</span> 加上另一端区间的长度 <spanclass="math inline">\(t_1\)</span> 的和为 <spanclass="math inline">\(k\)</span>，那显然 <span class="math inline">\(t_1= k-1\)</span>。合并后的长度为 <spanclass="math inline">\(1\)</span>。</p><p>然后，再合并一次，那么 <span class="math inline">\(t_2 =k-1\)</span>。合并后的长度仍为 <spanclass="math inline">\(1\)</span>。</p><p>显然，如果继续合并，那么会有无数个 <spanclass="math inline">\(k-1\)</span> 被合并，那么就有 <spanclass="math inline">\(t_n = k-1\)</span>，那么能够合并为长度为 <spanclass="math inline">\(1\)</span> 的区间的原长度就为 <spanclass="math inline">\(\sum \limits_{i = 1}^{n}{t_i}+1 \to n(k-1) +1\)</span>。</p><p>扩展一下，如果一个字符串长度为 <spanclass="math inline">\(l_1\)</span>，合并后的长度为 <spanclass="math inline">\(l_2\)</span>，那么根据上述方程，就有合并后的长度<span class="math inline">\(l_2 = (l_1 - 1) \bmod (k-1) +1\)</span>，于是枚举 <span class="math inline">\(l\)</span>的时候就不用每个都枚举，每次从右往左依次减去 <spanclass="math inline">\(k-1\)</span>。</p><p>所以显然易见 dp 方程就为：</p><p><span class="math display">\[\begin{cases}  dp_{i,j,2s} = \max \limits_{i \le l &lt; j,(j - 1 - l)\bmod( k - 1) =0} \{ dp_{i,l,s} + dp_{l+1,j,0} \} \\  dp_{i,j,(2s) \vee 1} = \max \limits_{i \le l &lt; j,(j - 1 - l)\bmod(k - 1) = 0} \{ dp_{i,l,s} + dp_{l+1,j,1} \}\end{cases}\]</span></p><p>特别的，当一段区间合并后的长度为 <spanclass="math inline">\(1\)</span>时，可以将所有的状态合并为一个字符，也就是：</p><p><span class="math display">\[\begin{cases}  dp_{i,j,0} = \max \limits_{0 \le s \le 2^k-1,r_s =0}\{dp_{i,j,s}+w_s\} \\  dp_{i,j,1} = \max \limits_{0 \le s \le 2^k-1,r_s =1}\{dp_{i,j,s}+w_s\}\end{cases}\]</span></p><p>这里的 <span class="math inline">\(r_s\)</span> 表示状态为 <spanclass="math inline">\(s\)</span> 的字符串合并后的答案，<spanclass="math inline">\(w_s\)</span>表示合并得到的分数，注意要开辅助数组储存。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll K<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">bool</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">getsum</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>j<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span>j<span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">>=</span>i<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>q<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">wes</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">32</span><span class="token operator">-</span><span class="token function">__builtin_clz</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调试 </span>ll n<span class="token punctuation">,</span>kk<span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll str<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> tr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>kk<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>tr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll k<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll j<span class="token operator">=</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ll sizee<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sizee<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sizee<span class="token operator">=</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll l<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">>=</span>i<span class="token punctuation">;</span> l<span class="token operator">-=</span><span class="token punctuation">(</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sizee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sizee<span class="token operator">==</span>kk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//合并后的长度为1</span>ll r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1145141919810ll</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>kk<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//答案</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces CF896C Willem, Chtholly and Seniorious 详解</title>
    <link href="/2023/11/05/Codeforces-CF896C-Willem-Chtholly-and-Seniorious-%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/11/05/Codeforces-CF896C-Willem-Chtholly-and-Seniorious-%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一道模板题。</p><p><a href="https://www.luogu.com.cn/problem/CF896C">传送门</a></p><span id="more"></span><h1 id="关于珂朵莉树">关于珂朵莉树</h1><h2 id="你需要知道以下内容">1.你需要知道以下内容</h2><ul><li>关于 <code>set</code> 的部分知识</li></ul><h2 id="什么是珂朵莉树">2.什么是珂朵莉树</h2><p>一种<strong>暴力</strong>数据结构，适用于随机生成的数据结构题以及<strong>骗分</strong>，主要有两种操作。</p><h2 id="初始化">3.初始化</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左、右端点</span><span class="token keyword">mutable</span> ll v<span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ll v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">l</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>l<span class="token punctuation">;</span> <span class="token comment">//根据左端点进行排序</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这段代码中，我们用 <span class="math inline">\(l\)</span> 和 <spanclass="math inline">\(r\)</span> 变量储存当前区间的左端点和右端点。<spanclass="math inline">\(v\)</span> 是所需要储存的内容，注意到 <spanclass="math inline">\(v\)</span> 前有关键字<code>mutable</code>。意思是“可变的”，因为 <code>set</code> 中储存的<span class="math inline">\(v\)</span>是一个常量，如果不加这个关键字会报错<code>error:cannot assign to return value because function 'operator-&gt;' returns a const value</code>。</p><p>然后，我们用一个 <code>set</code>来进行维护，为了后面的操作，我们会根据左端点来进行排序。最终维护下来就是下图所展示的。</p><figure><img src="https://cdn.luogu.com.cn/upload/image_hosting/tx535itn.png"alt="odt1" /><figcaption aria-hidden="true">odt1</figcaption></figure><h2 id="split-操作">4. split 操作</h2><p>当一段区间需要被分开时，我们就需要 <code>split</code> 操作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>ll pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> it<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>it<span class="token operator">--</span><span class="token punctuation">;</span>ll l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在此前，我们对 <span class="math inline">\(l\)</span>端点进行了排序，所以我们就可以二分查找 <code>pos</code>所在的区间，再将这个区间分割为 <code>[l,pos-1]</code> 和<code>[pos,r]</code> 两个区间。如果说 <code>pos</code>正好在这段区间的开头的话，显然易见就不用分割了。</p><figure><img src="https://cdn.luogu.com.cn/upload/image_hosting/1ge627vx.png"alt="odt2" /><figcaption aria-hidden="true">odt2</figcaption></figure><h2 id="assign-操作">5. assign 操作</h2><p>当一段区间需要合并时，我们就需要 <code>assign</code> 操作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这个操作中，我们先将 <code>[l,r]</code>区间分割出来，<code>erase</code> 将 <code>[l,r]</code>区间都给清空了，然后再插入一段新的区间，值为 <spanclass="math inline">\(v\)</span>。</p><figure><img src="https://cdn.luogu.com.cn/upload/image_hosting/yj4gwn8t.png"alt="odt3" /><figcaption aria-hidden="true">odt3</figcaption></figure><h1 id="关于本题的分析">关于本题的分析</h1><h2 id="操作">1 操作</h2><p>将区间 <code>[l,r]</code> 的值全部增加 <spanclass="math inline">\(v\)</span>，只需要暴力将 <code>[l,r]</code>内所有的区间的值都增加 <span class="math inline">\(v\)</span>即可。（这也是为什么要有 <code>mutable</code> 的原因）</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token operator">+=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="操作-1">2 操作</h2><p>就是 <code>assign</code> 操作。</p><h2 id="操作-2">3 操作</h2><p>将区间 <code>[l,r]</code> 内的所有区间的 <spanclass="math inline">\(v\)</span> 值排序，记录多少个，然后枚举到 <spanclass="math inline">\(x\)</span> 个为止。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node2</span> <span class="token punctuation">&#123;</span><span class="token comment">//排序所用的结构体</span>ll v<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token function">node2</span><span class="token punctuation">(</span>ll v<span class="token punctuation">,</span>ll cnt<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cnt</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node2 a<span class="token punctuation">,</span>node2 b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>v<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">search</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>node2<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">node2</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>ll i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从小到大枚举</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">&lt;</span>x<span class="token punctuation">)</span>x<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="操作-3">4 操作</h2><p>答案就为区间 <code>[l,r]</code> 内所有区间的值的 <spanclass="math inline">\(x\)</span> 次方再乘上区间长度。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll a_<span class="token punctuation">,</span>ll n_<span class="token punctuation">,</span>ll p_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll ans_<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a_<span class="token operator">%=</span>p_<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n_<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>ans_<span class="token operator">=</span>ans_<span class="token operator">*</span>a_<span class="token operator">%</span>p_<span class="token punctuation">;</span>n_<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>a_<span class="token operator">=</span>a_<span class="token operator">*</span>a_<span class="token operator">%</span>p_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">getans_pow</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll ans_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans_<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token function">qpow</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">;</span><span class="token comment">//区间长度乘区间值的 x 次方</span>ans_<span class="token operator">%=</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans_<span class="token operator">%</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="注意点">注意点</h1><p>在分割区间时，要先分割右边，在分割左边，也就是先<code>split(r+1)</code>，再<code>split(l)</code>。不然顺序不对在分割时可能会找不到分割区间。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll P<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>seed<span class="token punctuation">,</span>vmax<span class="token punctuation">;</span>ll <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll seedd<span class="token operator">=</span>seed<span class="token punctuation">;</span>seed<span class="token operator">=</span><span class="token punctuation">(</span>seed<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">%</span>P<span class="token punctuation">;</span><span class="token keyword">return</span> seedd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">question</span> <span class="token punctuation">&#123;</span>ll op<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">random_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> ll v<span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ll v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">l</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span>s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>ll pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">==</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> it<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>it<span class="token operator">--</span><span class="token punctuation">;</span>ll l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token operator">+=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node2</span> <span class="token punctuation">&#123;</span>ll v<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token function">node2</span><span class="token punctuation">(</span>ll v<span class="token punctuation">,</span>ll cnt<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cnt</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node2 a<span class="token punctuation">,</span>node2 b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>v<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">search</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>node2<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">node2</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>ll i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">&lt;</span>x<span class="token punctuation">)</span>x<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll a_<span class="token punctuation">,</span>ll n_<span class="token punctuation">,</span>ll p_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll ans_<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a_<span class="token operator">%=</span>p_<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n_<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>ans_<span class="token operator">=</span>ans_<span class="token operator">*</span>a_<span class="token operator">%</span>p_<span class="token punctuation">;</span>n_<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>a_<span class="token operator">=</span>a_<span class="token operator">*</span>a_<span class="token operator">%</span>p_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">getans_pow</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ll ans_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans_<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token function">qpow</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>it<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">;</span>ans_<span class="token operator">%=</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans_<span class="token operator">%</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>seed<span class="token operator">>></span>vmax<span class="token punctuation">;</span><span class="token function">random_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">assign</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">search</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token function">getans_pow</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">+</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.24-10.5 期间总结</title>
    <link href="/2023/10/05/9-24-10-5-%E6%9C%9F%E9%97%B4%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/05/9-24-10-5-%E6%9C%9F%E9%97%B4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="期间总结">9.24 - 10.5 期间总结</h1><h2 id="序言">序言</h2><p>深窥自己的心，而后发觉一切的奇迹在你自己。</p><p>——<strong>培根</strong></p><span id="more"></span><h2 id="摸底考试">9.24 摸底考试</h2><p>这可能是我 <strong>OI</strong>生涯中经历的最糟糕的一场考试，考前时因为肚子不舒服，有点虚，加之CSP第一轮后状态直线下降，让我对这次考试有所担忧。考试中我先开了<span class="math inline">\(A\)</span> 题，<spanclass="math inline">\(A\)</span>题是一道关于位运算的题。我当时以为很水，敲了下手打高精度，以为就过了，但不曾想因为没有考虑到溢出的问题，<spanclass="math inline">\({\color{red}WA\ (0)}\)</span> 了。然后开了 <spanclass="math inline">\(C\)</span> 题，<spanclass="math inline">\(C\)</span>题是构造题，构造一个相邻两数之差或和的绝对值为质数的内部元素从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(n\)</span>的序列。当时的方向想错了，以为是通过质数表暴搜得到，但时间会超，于是我想到了个自以为还行的<strong>伪解法</strong>，显然又 <span class="math inline">\({\color{red}WA\ (0)}\)</span>了。其他两道基本没想。最后的结果也<strong>爆零</strong>了。</p><h2 id="dp-1阶段-lcs-lis">DP 1阶段 (LCS &amp; LIS)</h2><p>在摸底考后几天时间里，老师和一些同学将作业表中 <spanclass="math inline">\(A\)</span> 到 <spanclass="math inline">\(E\)</span>题以及考试题讲述了一下，这里我见到了各种 <strong>dalao</strong>的各种方法，让我<del>大为</del>有所震惊。随后到国庆节又是一段空窗期，老师加了很多关于<strong>LIS</strong> 和 <strong>LCS</strong>的题，国庆节上课前两天也讲述了后面几道题的各种解法，让我的思维深度有了质的飞跃。但我<span class="math inline">\({\color{green} A}\)</span>的题还是很少，其中的 <span class="math inline">\(M\)</span>题死活过不去，这点我也无法理解。</p><h2 id="的小测试">10.5 的小测试</h2><p>赛前张老师说不希望我们爆零，于是我也为此提心吊胆，因为第一次我爆零了。考试的时候，又发生了一点小插曲，让我有点担忧。我先看了<span class="math inline">\(A\)</span> 题，<spanclass="math inline">\(A\)</span>题问纯色三角形的个数有多少。我第一时间想到了排列与组合，但想了很久也无法找到复杂度允许的算法，最后打了个<span class="math inline">\(O(n^3)\)</span> 的暴力骗点分。结果是 <spanclass="math inline">\({\color{red}WA\ (30)}\)</span>。随后我开了 <spanclass="math inline">\(B\)</span> 题，<spanclass="math inline">\(B\)</span>题有些难想，从体面上顺向思维是大概不会很轻松就想出来的，我发现反转操作是可逆的，于是我就想到从全<span class="math inline">\(0\)</span>给还原到图像，代码写完后算了下复杂度是 <spanclass="math inline">\(O(n^2)\)</span>，可以过掉。结果是 <spanclass="math inline">\({\color{green} AC\ (100)}\)</span>。<spanclass="math inline">\(C\)</span>题我当时没多想，最后才匆忙码，然后就成为全班唯一一个 <spanclass="math inline">\({\color{purplr} MLE\ (0)}\)</span>的人。<spanclass="math inline">\(D\)</span> 题原本我是推了 <spanclass="math inline">\(dp\)</span>公式，最后检查时发现读错题面了，这是一个重大失误，考场上出现非常致命。所以白白挂掉，时间又不够了，最后输出<span class="math inline">\(1\)</span> 想骗分，顺利 <spanclass="math inline">\({\color{red}WA\ (0)}\)</span>。总分 <spanclass="math inline">\(130\)</span>，不能说很好，但是有所进步。</p><h2 id="总结">总结</h2><p>这几天的表现并不好，或许是对环境的不适应，还是对自己过多的忧虑，希望可以将状态找回。</p><p>保持自信，相信自己，你会达成你的目标的！</p>]]></content>
    
    
    <categories>
      
      <category>学习总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P1971 [NOI2011] 兔兔与蛋蛋游戏 题解</title>
    <link href="/2023/09/15/Luogu-P1971-NOI2011-%E5%85%94%E5%85%94%E4%B8%8E%E8%9B%8B%E8%9B%8B%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/09/15/Luogu-P1971-NOI2011-%E5%85%94%E5%85%94%E4%B8%8E%E8%9B%8B%E8%9B%8B%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="传送门">传送门</h1><p><a href="https://www.luogu.com.cn/problem/P1971">P1971 [NOI2011]兔兔与蛋蛋游戏</a></p><h1 id="解决思路">解决思路</h1><p>对于每次移动，我们可以将它理解为空格在移动，同时有一个结论，空格的移动不可能出现环，即不重复的经过部分点，证明如下：</p><span id="more"></span><p>我们先假设空格的移动会出现环，不妨设其起点为 <spanclass="math inline">\(s_1\)</span>，那么再设经过 <spanclass="math inline">\(k\)</span> 次过后回到 <spanclass="math inline">\(s_1\)</span>，中间经过 <spanclass="math inline">\(s_1,s_2,s_3,\text{…},s_{k+1}\)</span> 后回到 <spanclass="math inline">\(s_1\)</span>。这个环因为是在棋盘上的，那我们就可以知道这个环的周长为<span class="math inline">\(2l (l \inR)\)</span>。如果格子里填的是黑棋子，那么经过偶数步我们当前必然只能走白格子，所以所设结论错误，所以空格的移动不可能出现环。</p><p>既然如此，我们也可以知道其实就是二分图博弈，就是套模板，这道题就做完了。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//二分图博弈模板</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span> ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">gethash</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll tot<span class="token punctuation">;</span>ll link<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll elast<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll del<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ll rans<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visit<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">hungarian</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>匈牙利算法ll x<span class="token operator">=</span>id<span class="token punctuation">,</span>y<span class="token punctuation">;</span>visit<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>elast<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>visit<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span>del<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>visit<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>link<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">hungarian</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>link<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>link<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll k<span class="token punctuation">;</span><span class="token keyword">char</span> Map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token comment">//空格位置 </span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll pointt<span class="token operator">=</span><span class="token function">gethash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>del<span class="token punctuation">[</span>pointt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span>pointt<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ll point2<span class="token operator">=</span>link<span class="token punctuation">[</span>pointt<span class="token punctuation">]</span><span class="token punctuation">;</span>link<span class="token punctuation">[</span>point2<span class="token punctuation">]</span><span class="token operator">=</span>link<span class="token punctuation">[</span>pointt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hungarian</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> ans<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>Map<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//X/.连O </span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>n<span class="token operator">&amp;&amp;</span>Map<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>m<span class="token operator">&amp;&amp;</span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hungarian</span><span class="token punctuation">(</span><span class="token function">gethash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cin<span class="token operator">>></span>k<span class="token punctuation">;</span>ll cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;i&lt;&lt;endl;</span><span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;i&lt;&lt;" "&lt;&lt;ans[i]&lt;&lt;endl;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断是否犯错误</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>rans<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>rans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P6995 [NEERC2014] Knockout Racing 题解</title>
    <link href="/2023/08/17/Luogu-P6995-NEERC2014-Knockout-Racing-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/Luogu-P6995-NEERC2014-Knockout-Racing-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目链接">题目链接</h1><p><a href="https://www.luogu.com.cn/problem/P6995">题 目 链 接</a></p><span id="more"></span><h1 id="分析">分析</h1><p>纯暴力 <span class="math inline">\(O(n^2)\)</span>就可以过，对于每次询问，先计算每辆车在 <spanclass="math inline">\(t\)</span> 秒后的所在位置，如果车是从 <spanclass="math inline">\(a\)</span> 点过去（即 <spanclass="math inline">\(\displaystyle\frac{t}{b-a}\)</span>为偶数），所在位置就应是 <spanclass="math inline">\(t\bmod(b-a)\)</span>，如是从 <spanclass="math inline">\(b\)</span> 点回来（即 <spanclass="math inline">\(\displaystyle\frac{t}{b-a}\)</span>为奇数），所在位置就为 <spanclass="math inline">\(t-t\bmod(b-a)\)</span>。再判断所在位置是否在询问的区间内即可。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>ll a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">qu</span><span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ques<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">>></span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll difference<span class="token operator">=</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">-</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token comment">//a,b两端点距离 </span>ll to_back<span class="token operator">=</span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">/</span>difference<span class="token punctuation">;</span><span class="token comment">//往返次数 </span>ll meter<span class="token operator">=</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token punctuation">(</span>to_back<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">%</span>difference<span class="token operator">:</span>difference<span class="token operator">-</span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">%</span>difference<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所在位置</span><span class="token keyword">if</span><span class="token punctuation">(</span>meter<span class="token operator">>=</span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span>ques<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">>=</span>meter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P2328 [SCOI2005] 超级格雷码 题解</title>
    <link href="/2023/08/08/Luogu-P2328-SCOI2005-%E8%B6%85%E7%BA%A7%E6%A0%BC%E9%9B%B7%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/08/Luogu-P2328-SCOI2005-%E8%B6%85%E7%BA%A7%E6%A0%BC%E9%9B%B7%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目">题目</h1><p><a href="https://www.luogu.com.cn/problem/P2328">题目链接。</a></p><h1 id="简述">简述</h1><p>输出 <span class="math inline">\(B\)</span> 进制 <spanclass="math inline">\(n\)</span> 位的所有格雷码。</p><span id="more"></span><h1 id="思考">思考</h1><p>通过观察，我们发现第 <span class="math inline">\(x\)</span>个格雷码的第 <span class="math inline">\(n\)</span> 位为 <spanclass="math inline">\(\lfloor \displaystyle \frac{x-1}{B^{n-1}}\rfloor\)</span>，第 <span class="math inline">\(n-i\)</span> 位 <spanclass="math inline">\((i&gt;0)\)</span> 其实要从第 <spanclass="math inline">\(n\)</span> 位到第 <spanclass="math inline">\(n-i+1\)</span> 位之和判断，如果第 <spanclass="math inline">\(n\)</span> 位到第 <spanclass="math inline">\(n-i+1\)</span> 位之和为偶数,则第 <spanclass="math inline">\(n-i\)</span> 位为 <spanclass="math inline">\(\lfloor \displaystyle \frac{(x-1) \bmodB^{n-i}}{B^{n-i-1}} \rfloor\)</span>，否则如果是奇数则 <spanclass="math inline">\(n-i\)</span> 位为 $B-1- $。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll n<span class="token punctuation">,</span>B<span class="token punctuation">;</span> ll even_odd<span class="token punctuation">;</span> <span class="token comment">//判断前面的数的奇偶性。 </span>ll ans<span class="token punctuation">[</span><span class="token number">1110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//输出 </span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//快速幂 </span>ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>ans<span class="token operator">*=</span>a<span class="token punctuation">;</span>b<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>a<span class="token operator">*=</span>a<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>B<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>even_odd<span class="token operator">=</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>even_odd<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">:</span>B<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">qpow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过公式可知 </span>even_odd<span class="token operator">+=</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P4513 小白逛公园 题解~</title>
    <link href="/2023/08/07/Luogu-P4513-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/07/Luogu-P4513-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前置芝士">前置芝士</h1><ul><li><p>线段树</p></li><li><p><del>一定量的大脑</del></p></li></ul><h1 id="题目">题目</h1><p><a href="https://www.bilibili.com/video/BV1yL411K7CP/"><del>链 接 地址 (大雾</del></a></p><p><a href="https://www.luogu.com.cn/problem/P4513">真 正 的 链接</a></p><span id="more"></span><h1 id="简述">简述</h1><p>给定一段共有 <span class="math inline">\(n\)</span>个点的线段，每个点都有一个值，现有 <spanclass="math inline">\(m\)</span> 次，<spanclass="math inline">\(2\)</span> 种操作：</p><ol type="1"><li><p>形如 $ 1 a b $，求值操作，求 <span class="math inline">\([\ a ,b\]\)</span> 区间内最大子序列和。</p></li><li><p>形如 $ 2 p s $，修改操作，将点 <spanclass="math inline">\(p\)</span> 的值修改为 <spanclass="math inline">\(s\)</span> 。</p></li></ol><p>对于每次 <span class="math inline">\(1\)</span>号操作，输出其区间内最大子序列和 <spanclass="math inline">\(ans\)</span>。</p><h1 id="思考">思考</h1><!--more--><p>如果我们用正常的方法求区间最大值，时间复杂度为 <spanclass="math inline">\(O(N)\)</span>，显然如果执行 <spanclass="math inline">\(m\)</span>次肯定会超时，我们就可以用一种高端大气时间复杂度仅为 <spanclass="math inline">\(O(log_2N)\)</span> 复杂度的算法：线段树。</p><h2 id="建树">建树</h2><p>不用多解释，上代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//上提操作</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//l1，r1作用下文会提及。</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//建树过程</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="修改操作">修改操作</h2><p>既然只修改一个点的值，那肯定就用线段树的单点修改就 <spanclass="math inline">\(OK\)</span> 了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll x<span class="token punctuation">,</span>ll num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单点修改</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>num<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">change</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">change</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="求和操作">求和操作</h2><p>枚举到一个节点时有如下几种情况：</p><ol type="1"><li>该节点位于所求区间内，返回。</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">>=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//位于区间内</span><span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ol start="2" type="1"><li>区间位于该节点左儿子内部，枚举该节点左儿子。</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ll anss<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e17</span><span class="token punctuation">;</span><span class="token comment">//答案</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>=</span>l<span class="token punctuation">)</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">GetSum</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左儿子包含所求区间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ol start="3" type="1"><li>区间位于该节点右儿子内部，枚举该节点右儿子。</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>=</span>l<span class="token punctuation">)</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">GetSum</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右儿子包含所求区间</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="4" type="1"><li>区间与左儿子，右儿子都有交集，则我们设一个节点的 <spanclass="math inline">\(l1\)</span> 为从左起的一段最大值， <spanclass="math inline">\(r1\)</span>为从右起的一段最大值。随后可以用递归来求最大的从中间部分起左、右边部分区间和最大值，再合并求得最大值。</li></ol><h3 id="递归过程">递归过程</h3><p>有两侧的递归，这里分开来讲。</p><h4 id="左递归">左递归</h4><p>首先先看左儿子有如下情况：</p><ol type="1"><li><p>如果这个节点的左儿子在所要求区间的左侧要小，递归结束，代表这个节点的<span class="math inline">\(r1\)</span>值即是其目前递归的值，返回。</p></li><li><p>如果该节点的右儿子是被其要求区间完全覆盖（即所要求区间的左、右端点与其右儿子的左、右端点重合），则其最大值要么是其右儿子的<span class="math inline">\(r1\)</span>值，要么是右儿子的总和加上其左儿子的递归结果，从中取最大即可。</p></li><li><p>如果该节点的右儿子是被其要求区间覆盖（但所要求区间的左端点与其右儿子的左端点不重合，也就是说该节点的左儿子并没有包含所要求区间），递归右儿子，取其值。</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">Tree_num_l</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况1</span><span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况2</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况3</span><span class="token keyword">return</span> <span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="右递归">右递归</h4><p>和左递归差不多，不过要改点细节。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">Tree_num_r</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况1</span><span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况2</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况3</span><span class="token keyword">return</span> <span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr /><p>这是递归过程的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll ansss<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ansss<span class="token operator">+=</span><span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>ansss<span class="token operator">+=</span><span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ansss<span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr /><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">500000</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>max<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Tree<span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//上提操作</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//l1，r1作用下文会提及。</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//建树过程</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll x<span class="token punctuation">,</span>ll num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单点修改</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>num<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">change</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">change</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">Tree_num_l</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况1</span><span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况2</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况3</span><span class="token keyword">return</span> <span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll <span class="token function">Tree_num_r</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll mid<span class="token operator">=</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况1</span><span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情况2</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1<span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//情况3</span><span class="token keyword">return</span> <span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll <span class="token function">GetSum</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">>=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll ansss<span class="token operator">=</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span><span class="token keyword">return</span> ansss<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll anss<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e17</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>=</span>l<span class="token punctuation">)</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">GetSum</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>=</span>l<span class="token punctuation">)</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">GetSum</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&amp;&amp;</span>Tree<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll ansss<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ansss<span class="token operator">+=</span><span class="token function">Tree_num_l</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>ansss<span class="token operator">+=</span><span class="token function">Tree_num_r</span><span class="token punctuation">(</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>anss<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ansss<span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> anss<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>x<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P3623 [APIO2008] 免费道路 题解</title>
    <link href="/2023/08/04/Luogu-P3623-APIO2008-%E5%85%8D%E8%B4%B9%E9%81%93%E8%B7%AF-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/04/Luogu-P3623-APIO2008-%E5%85%8D%E8%B4%B9%E9%81%93%E8%B7%AF-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前置芝士">前置芝士</h1><ul><li><p>并查集</p></li><li><p><strong>Kruscal</strong> 重构树</p></li><li><p>图论基础知识</p></li></ul><h1 id="题目">题目</h1><p><a href="https://www.luogu.com.cn/problem/P3623">链接地址</a></p><span id="more"></span><h1 id="题目简述">题目简述</h1><p>给定两种边 <span class="math inline">\(stone,cement\)</span>。现有<span class="math inline">\(n\)</span> 个节点，共有 <spanclass="math inline">\(m\)</span>条<strong>不同种类</strong>的边连接，现需选择一些边，使这些节点互相连通，其中<span class="math inline">\(stone\)</span> 边为 <spanclass="math inline">\(K\)</span> 条。求连接边的道路总和最小的方案。</p><h1 id="思考">思考</h1><p>我们可以设某一种边全部都连接，则如果另一种边选择一部分边连接一些使这个图连通，则这些边肯定是必要的，既然是连通性问题，我们就可以用<strong>并查集</strong>解决是否连通。必要的边求出后，再考虑连通性并选择边连接，注意其中<span class="math inline">\(stone\)</span> 边有 <spanclass="math inline">\(K\)</span> 条即可。</p><h1 id="边界考虑">边界考虑</h1><p>如果求出来的 <span class="math inline">\(stone\)</span> 边的数量大于<span class="math inline">\(K\)</span> 的数量，显然是与题意要求恰好有<span class="math inline">\(K\)</span> 条边不符的，如果除 <spanclass="math inline">\(cement\)</span> 边的数量是小于 <spanclass="math inline">\(K\)</span> 的，则说明其 <spanclass="math inline">\(stone\)</span> 边的数量再怎么增加都会小于 <spanclass="math inline">\(K\)</span> ，即输出 no solution。</p><h1 id="ac-code">AC code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span> ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>stone<span class="token punctuation">,</span>cement<span class="token punctuation">,</span>tot<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>need<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span> ll father<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//并查集。</span>ll <span class="token function">getfather</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">==</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span>x<span class="token operator">:</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getfather</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//合并。</span>ll fx<span class="token operator">=</span><span class="token function">getfather</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>ll fy<span class="token operator">=</span><span class="token function">getfather</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token operator">!=</span>fy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>father<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token operator">=</span>fy<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//先连接stone边</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//检查连通性并储存                   </span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cement<span class="token operator">++</span><span class="token punctuation">;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span> need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//连接cement边                      </span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//检查连通性并储存</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stone<span class="token operator">++</span><span class="token punctuation">;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span> need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//边界考虑                      </span><span class="token keyword">if</span><span class="token punctuation">(</span>stone<span class="token operator">></span>k<span class="token operator">||</span>cement<span class="token operator">></span>n<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"no solution"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Merge</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//stone路的连接</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token operator">-</span>stone<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//cout&lt;&lt;j&lt;&lt;endl;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//cement路的连接</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getfather</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>  need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>need<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token function">Merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P2986 [USACO10MAR] Great Cow Gathering G 题解</title>
    <link href="/2023/08/03/Luogu-P2986-USACO10MAR-Great-Cow-Gathering-G-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/03/Luogu-P2986-USACO10MAR-Great-Cow-Gathering-G-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前置芝士">前置芝士</h1><ul><li><p>DFS</p></li><li><p>图论基础知识</p></li></ul><span id="more"></span><h1 id="题目">题目</h1><p><a href="https://www.luogu.com.cn/problem/P2986">题目链接。</a></p><h1 id="题目超短的简述">题目<del>超短的</del>简述</h1><p>给出一棵树，每个节点都有一个权值。现选择一点 <spanclass="math inline">\(X\)</span>作为根节点，则其不方便值为其它点的权值乘上距离点 <spanclass="math inline">\(X\)</span> 的长度之和，求最小的不方便值。</p><h1 id="思考">思考</h1><p>本题给出了一棵树，不妨设根节点为 <spanclass="math inline">\(1\)</span> ，先求出每个节点 <spanclass="math inline">\(i\)</span> 有多少头儿子奶牛 <spanclass="math inline">\(sonnum_i\)</span>（包括自己），在从根节点开始寻找，如果节点的儿子 <spanclass="math inline">\(son_{i}\)</span> 所包含的奶牛数量 <spanclass="math inline">\(sonnum_{son_{i}}\)</span> 大于其他奶牛的数量，则代表如果选择这个点作为集会点，其 <spanclass="math inline">\(son_{i}\)</span>的儿子少走的距离会比其他的点多走的距离要多，表明如果选择此点会让不方便值更小，我们就可以从这个点再次重复搜索过程，直到不能再搜索，表明这个点是<strong>目前搜索</strong>的最优值。这个过程可以用DFS来实现,最后搜索出来的点<strong>可能会有很多</strong>，可以一个一个搜索出它们的最小不方便值，也可用DFS来实现。对于那些还没有学过树形DP的人相对而言会易于理解（肯定会比树形DP要慢）。</p><h1 id="ac-code">AC Code</h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>en<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>son<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>son_num<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> mark<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>markk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll cows<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>n<span class="token punctuation">,</span>num<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>anss<span class="token operator">=</span><span class="token number">100000000000000000</span><span class="token punctuation">;</span>ll <span class="token function">dfs1</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//求得每个节点子树的儿子个数。 </span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>st<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>en<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>mark<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span><span class="token function">dfs1</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mark<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>son<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token operator">+</span>cows<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token operator">+</span>cows<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getans</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span>ll numm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//求得以id节点为集会地点时的不方便程度。 </span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cows<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>numm<span class="token operator">*</span>cows<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>st<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>en<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>markk<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>markk<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">getans</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>numm<span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>markk<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//求得有哪些点满足最优条件。 </span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//flag来判断是否是目前搜索的最优点。</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>st<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>en<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">>=</span>son_num<span class="token operator">-</span>son<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里检测儿子节点所包含的奶牛数量是否比其他奶牛大。</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>mark<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>markk<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>markk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">getans</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anss<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>anss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>cows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>son_num<span class="token operator">+=</span>cows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>z<span class="token punctuation">;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>z<span class="token punctuation">;</span>e<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>y<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">!=</span>e<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>en<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>en<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//作者忘了链式向前星怎么写，这段大家应该都能看懂。 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求得每个节点子树的儿子个数。 </span><span class="token function">memset</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求得有哪些点满足最优条件，这里一并求值。 </span>cout<span class="token operator">&lt;&lt;</span>anss<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="附">附</h1><p>这是本蒻的第一篇题解，有任何错误都可以在评论区指出。</p>]]></content>
    
    
    <categories>
      
      <category>解题题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构学习笔记1——线段树</title>
    <link href="/2023/07/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2023/07/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一种数据结构，适用于在线修改区间，求区间最值，区间求和问题等。</p><p>本质上是一棵二叉树。</p><p><strong>优点：维护内容多样，易于理解。</strong></p><p><strong>缺点：常数太大，码量较大，空间较大。</strong></p><h1 id="算法">算法</h1><h2 id="储存建树">储存+建树</h2><p>线段树之所以叫线段树，是因为它里面的每个节点存储了一部分区间（<del>照理来说应该取名为区间树但为啥要叫线段树</del>），储存了这一段区间的一些信息。前面提到，线段树本质上是一棵二叉树，于是每一个父节点被劈成两半，它的区间也要被劈成两半。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    ll l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    ll v<span class="token punctuation">;</span><span class="token comment">//你要维护的信息，这里均用区间和表示</span>    ll lazy<span class="token punctuation">;</span><span class="token comment">//后面会写</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的结构体储存了树的节点的左右端点以及要维护的信息。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//建范围 [l,r] 的树</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//加上初始化的内容。</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Tree[id].v = Tree[id * 2].v + Tree[id * 2 + 1];</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里就是一个建树的过程，大区间被劈开成为小的区间。</p><p>建树的时间复杂度就是树的节点数，复杂度为 <spanclass="math inline">\(O(n)\)</span>。</p><p><strong>注意：假若你要在建树时初始化部分内容，初始化后要将初始化的东西上提到它的父节点（上面的注释）。</strong></p><h2 id="单点修改">单点修改</h2><p>我们可以通过递归，找到要修改的点的有且只有该点的区间，然后上提。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//单点修改 k 增加 x。</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">+=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token comment">//递归</span>    <span class="token punctuation">&#123;</span>        <span class="token function">change</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">change</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//上提</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>单点修改所经过的点数为树的深度，也就是说时间复杂度为 <spanclass="math inline">\(O(\log n)\)</span>。</p><h2 id="区间修改">区间修改</h2><p>这是，我们就要引入一个新的东西，<spanclass="math inline">\(lazy\)</span>标记，如果我们像单点修改一样直接将所有的区间点更改，会牵扯到很多的点，使复杂度原地爆炸，而<span class="math inline">\(lazy\)</span>标记则是为了来降低时间复杂度（当然也让常数飙升），到了我们需要再求的时候，再用<span class="math inline">\(lazy\)</span> 更新儿子，并且传递下去。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//下放编号为 id 的点。</span><span class="token keyword">void</span> <span class="token function">pushDown</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">+=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">+=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是其下放操作的代码，先将儿子的 <spanclass="math inline">\(lazy\)</span> 改为父亲的，再将其值更改，后将父亲的<code>lazy</code> 值清掉。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将区间 [l,r] 内的数都增加 x。</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pushDown</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">+=</span> x<span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">change</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">change</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这段代码中，先检测有没有下放的必要，再更新，如果这段点包含在了<code>[l,r]</code> 中，就将该点更新，同时也要将 <spanclass="math inline">\(lazy\)</span> 值更新。</p><h2 id="区间查询">区间查询</h2><p>这个简单，只需要查询其树上连续的值拼接在一起就行了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//求区间 [l,r] 的和。</span>ll <span class="token function">GetSum</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pushDown</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="更多">更多</h2><p>详见例题。</p><h1 id="例题">例题</h1><h2 id="scoi2010-序列操作">[SCOI2010] 序列操作</h2><p><ahref="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2383&amp;tid=M">LinkNKOJ</a> and <a href="https://www.luogu.com.cn/problem/P2572">LinkLuogu</a></p><p>这道题是线段树的经典例题，但是就是按照题意模拟即可，再需要注意的是不同操作之间的<span class="math inline">\(lazy\)</span> 值不一样，要替换或更改。</p><h3 id="ac-code">AC code</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    ll l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> l1_1<span class="token punctuation">,</span> l1_0<span class="token punctuation">,</span> r1_1<span class="token punctuation">,</span> r1_0<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> max1<span class="token punctuation">,</span> max0<span class="token punctuation">,</span> lazy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Tree<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll flag<span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">;</span>ll <span class="token function">change</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">&lt;</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">;</span>    <span class="token keyword">else</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">&lt;</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">;</span>    <span class="token keyword">else</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">&lt;</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">;</span>    <span class="token keyword">else</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">&lt;</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0<span class="token punctuation">;</span>    <span class="token keyword">else</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max0 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cout&lt;&lt;id&lt;&lt;" "&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].l1_1&lt;&lt;" "&lt;&lt;Tree[id].r1_1&lt;&lt;" "&lt;&lt;Tree[id].max1&lt;&lt;endl;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span>ll id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">change1</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">down</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0 <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0 <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].l1&lt;&lt;endl;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token function">change1</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>        <span class="token function">change1</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">change2</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">down</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">,</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r1_0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].l1&lt;&lt;endl;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token function">change2</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>        <span class="token function">change2</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">GetSum1</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">down</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].sum&lt;&lt;endl;</span>        <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        ans <span class="token operator">+=</span> <span class="token function">GetSum1</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>        ans <span class="token operator">+=</span> <span class="token function">GetSum1</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">GetSum2</span><span class="token punctuation">(</span>ll id<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">down</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>max1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> Tree<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token function">GetSum2</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> mid<span class="token punctuation">)</span>        sum1 <span class="token operator">=</span> <span class="token function">GetSum2</span><span class="token punctuation">(</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ll len <span class="token operator">=</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        ll len1 <span class="token operator">=</span> r <span class="token operator">-</span> Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        ll res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1_1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll res1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l1_1<span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum2 <span class="token operator">=</span> res <span class="token operator">+</span> res1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>sum1<span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*void prt(ll id,ll l,ll r)&#123;    if(l==r)&#123;        cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].sum&lt;&lt;endl;        //if(Tree[id].l1&lt;=0)Tree[id].l1=0;        //if(Tree[id].r1&lt;=0)Tree[id].r1=0;        return;    &#125;    ll mid=(l+r)/2;    prt(id*2,l,mid);    prt(id*2+1,mid+1,r);    cout&lt;&lt;Tree[id].l&lt;&lt;" "&lt;&lt;Tree[id].r&lt;&lt;" "&lt;&lt;Tree[id].sum&lt;&lt;endl;&#125;*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// freopen("sb.txt","w",stdout);</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> flag <span class="token operator">>></span> a_ <span class="token operator">>></span> b_<span class="token punctuation">;</span>        a_<span class="token operator">++</span><span class="token punctuation">;</span>        b_<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">change1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">change1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">change2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">GetSum1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">GetSum2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a_<span class="token punctuation">,</span> b_<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://www.luogu.com.cn/record/115758452">AC Link</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
