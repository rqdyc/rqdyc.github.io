<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Luogu P2328 [SCOI2005] 超级格雷码 题解</title>
    <link href="/2024/01/10/Luogu-P2328-SCOI2005-%E8%B6%85%E7%BA%A7%E6%A0%BC%E9%9B%B7%E7%A0%81-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P2328-SCOI2005-%E8%B6%85%E7%BA%A7%E6%A0%BC%E9%9B%B7%E7%A0%81-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.luogu.com.cn/problem/P2328">题目链接。</a></p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container> 进制 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位的所有格雷码。</p><span id="more"></span><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>通过观察，我们发现第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 个格雷码的第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.629ex;" xmlns="http://www.w3.org/2000/svg" width="8.196ex" height="4.665ex" role="img" focusable="false" viewBox="0 -1342 3622.4 2061.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mstyle" transform="translate(444,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1794.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msup" transform="translate(282.2,-719.9)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="2494.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2734.4,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></g></svg></mjx-container>，第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.904ex" height="1.681ex" role="img" focusable="false" viewBox="0 -661 2167.4 743"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.689ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2956.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1011.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(2067.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2567.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 其实要从第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位到第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.801ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 3889.9 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2389.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3389.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 位之和判断，如果第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位到第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.801ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 3889.9 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2389.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3389.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 位之和为偶数,则第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.904ex" height="1.681ex" role="img" focusable="false" viewBox="0 -661 2167.4 743"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.629ex;" xmlns="http://www.w3.org/2000/svg" width="20.148ex" height="5.114ex" role="img" focusable="false" viewBox="0 -1540.4 8905.3 2260.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mstyle" transform="translate(444,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2183.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2683.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3350.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="msup" transform="translate(5517,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="msup" transform="translate(2526.7,-719.9)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1723,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2501,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="7777.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8017.3,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></g></svg></mjx-container>，否则如果是奇数则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.904ex" height="1.681ex" role="img" focusable="false" viewBox="0 -661 2167.4 743"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 位为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.629ex;" xmlns="http://www.w3.org/2000/svg" width="28.528ex" height="5.114ex" role="img" focusable="false" viewBox="0 -1540.4 12609.2 2260.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(981.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1981.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2703.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(3703.9,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mstyle" transform="translate(4147.9,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2183.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2683.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3350.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="msup" transform="translate(5517,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="msup" transform="translate(2526.7,-719.9)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1723,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2501,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="7777.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8017.3,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></g></svg></mjx-container>。 </p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br>ll n,B; <br>ll even_odd; <span class="hljs-comment">//判断前面的数的奇偶性。 </span><br>ll ans[<span class="hljs-number">1110</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>{<span class="hljs-comment">//输出 </span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br><span class="hljs-keyword">if</span>(ans[i]&gt;<span class="hljs-number">9</span>)cout&lt;&lt;(<span class="hljs-type">char</span>)(ans[i]<span class="hljs-number">-10</span>+<span class="hljs-string">'A'</span>);<br><span class="hljs-keyword">else</span> cout&lt;&lt;ans[i];<br>}<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll b)</span></span>{<span class="hljs-comment">//快速幂 </span><br>ll ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>){<br><span class="hljs-keyword">if</span>(b%<span class="hljs-number">2</span>)ans*=a;<br>b/=<span class="hljs-number">2</span>;<br>a*=a; <br>} <br><span class="hljs-keyword">return</span> ans;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;B;<br><span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">1</span>;x&lt;=<span class="hljs-built_in">qpow</span>(B,n);x++){<br>ans[<span class="hljs-number">1</span>]=(x<span class="hljs-number">-1</span>)/<span class="hljs-built_in">qpow</span>(B,n<span class="hljs-number">-1</span>);<br>even_odd=ans[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>;i&lt;=n;i++){<br>ans[i]=(even_odd%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>?(((x<span class="hljs-number">-1</span>)%<span class="hljs-built_in">qpow</span>(B,n-i+<span class="hljs-number">1</span>)))/<span class="hljs-built_in">qpow</span>(B,n-i):B<span class="hljs-number">-1</span>-(((x<span class="hljs-number">-1</span>)%<span class="hljs-built_in">qpow</span>(B,n-i+<span class="hljs-number">1</span>)))/<span class="hljs-built_in">qpow</span>(B,n-i));<span class="hljs-comment">//通过公式可知 </span><br>even_odd+=(ans[i]%<span class="hljs-number">2</span>);<br>}<br><span class="hljs-built_in">print</span>();<br>}<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P2986 [USACO10MAR] Great Cow Gathering G 题解</title>
    <link href="/2024/01/10/Luogu-P2986-USACO10MAR-Great-Cow-Gathering-G-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P2986-USACO10MAR-Great-Cow-Gathering-G-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h1><ul><li><p>DFS</p></li><li><p>图论基础知识</p></li></ul><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.luogu.com.cn/problem/P2986">题目链接。</a></p><h1 id="题目超短的简述"><a href="#题目超短的简述" class="headerlink" title="题目超短的简述"></a>题目<del>超短的</del>简述</h1><p>给出一棵树，每个节点都有一个权值。现选择一点 $X$ 作为根节点，则其不方便值为其它点的权值乘上距离点 $X$ 的长度之和，求最小的不方便值。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>本题给出了一棵树，不妨设根节点为 $1$ ，先求出每个节点 $i$ 有多少头儿子奶牛 $sonnum_i$ （包括自己），在从根节点开始寻找，如果节点的儿子 $son_{i}$ 所包含的奶牛数量 $sonnum_{son_{i}}$ 大于其他奶牛的数量， 则代表如果选择这个点作为集会点，其 $son_{i}$ 的儿子少走的距离会比其他的点多走的距离要多，表明如果选择此点会让不方便值更小，我们就可以从这个点再次重复搜索过程，直到不能再搜索，表明这个点是<strong>目前搜索</strong>的最优值。这个过程可以用DFS来实现,最后搜索出来的点<strong>可能会有很多</strong>，可以一个一个搜索出它们的最小不方便值，也可用DFS来实现。对于那些还没有学过树形DP的人相对而言会易于理解（肯定会比树形DP要慢）。</p><h1 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>ll x,y,z;<br>&#125; e[N*<span class="hljs-number">2</span>+<span class="hljs-number">10</span>];<br>ll st[N],en[N],son[N],son_num;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.x&lt;b.x;<br>&#125;<br><span class="hljs-type">bool</span> mark[N],markk[N];<br>ll cows[N],x,y,z,n,num,ans,anss=<span class="hljs-number">100000000000000000</span>;<br><span class="hljs-function">ll <span class="hljs-title">dfs1</span><span class="hljs-params">(ll id,ll sum)</span> </span>&#123;<span class="hljs-comment">//求得每个节点子树的儿子个数。 </span><br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ll i=st[id]; i&lt;=en[id]; i++) &#123;<br><span class="hljs-keyword">if</span>(!mark[e[i].y]) &#123;<br>flag=<span class="hljs-number">1</span>;<br>mark[id]=<span class="hljs-number">1</span>;<br>sum+=<span class="hljs-built_in">dfs1</span>(e[i].y,<span class="hljs-number">0</span>);<br>mark[e[i].y]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>son[id]=sum+cows[id];<br><span class="hljs-keyword">return</span> sum+cows[id];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getans</span><span class="hljs-params">(ll id,ll numm)</span> </span>&#123;<span class="hljs-comment">//求得以id节点为集会地点时的不方便程度。 </span><br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(cows[id])ans+=numm*cows[id];<br><span class="hljs-keyword">for</span>(ll i=st[id]; i&lt;=en[id]; i++) &#123;<br><span class="hljs-keyword">if</span>(!markk[e[i].y])&#123;<br>markk[id]=<span class="hljs-number">1</span>;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">getans</span>(e[i].y,numm+e[i].z);<br>markk[id]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll id)</span> </span>&#123;<span class="hljs-comment">//求得有哪些点满足最优条件。 </span><br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//flag来判断是否是目前搜索的最优点。</span><br><span class="hljs-keyword">for</span>(ll i=st[id]; i&lt;=en[id]; i++) &#123;<br><span class="hljs-keyword">if</span>(son[e[i].y]&gt;=son_num-son[e[i].y]&amp;&amp;!mark[e[i].y]) &#123;<span class="hljs-comment">//这里检测儿子节点所包含的奶牛数量是否比其他奶牛大。</span><br>flag=<span class="hljs-number">1</span>;<br>mark[id]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(e[i].y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!flag)&#123;<br><span class="hljs-built_in">memset</span>(markk,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(markk));<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">getans</span>(id,<span class="hljs-number">0</span>);<br>anss=<span class="hljs-built_in">min</span>(ans,anss);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br>cin&gt;&gt;cows[i];<br>son_num+=cows[i];<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;n; i++) &#123;<br>cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>e[i].x=x,e[i].y=y,e[i].z=z;<br>e[i+n<span class="hljs-number">-1</span>].x=y,e[i+n<span class="hljs-number">-1</span>].y=x,e[i+n<span class="hljs-number">-1</span>].z=z;<br>&#125;<br><span class="hljs-built_in">sort</span>(e+<span class="hljs-number">1</span>,e+<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>,cmp);<br>st[e[<span class="hljs-number">1</span>].x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>; i&lt;=<span class="hljs-number">2</span>*n<span class="hljs-number">-2</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(e[i].x!=e[i<span class="hljs-number">-1</span>].x)&#123;<br>en[e[i<span class="hljs-number">-1</span>].x]=i<span class="hljs-number">-1</span>;<br>st[e[i].x]=i;<br>&#125;<br>&#125;<br>en[n]=n*<span class="hljs-number">2</span><span class="hljs-number">-2</span>;<br>   <span class="hljs-comment">//作者忘了链式向前星怎么写，这段大家应该都能看懂。 </span><br>    <span class="hljs-built_in">memset</span>(mark,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(mark));<br><span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//求得每个节点子树的儿子个数。 </span><br><span class="hljs-built_in">memset</span>(mark,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(mark));<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//求得有哪些点满足最优条件，这里一并求值。 </span><br>cout&lt;&lt;anss&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>这是本蒻的第一篇题解，有任何错误都可以在评论区指出。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P3623 [APIO2008] 免费道路 题解</title>
    <link href="/2024/01/10/Luogu-P3623-APIO2008-%E5%85%8D%E8%B4%B9%E9%81%93%E8%B7%AF-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P3623-APIO2008-%E5%85%8D%E8%B4%B9%E9%81%93%E8%B7%AF-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h1><ul><li><p>并查集</p></li><li><p><strong>Kruscal</strong> 重构树</p></li><li><p>图论基础知识</p></li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.luogu.com.cn/problem/P3623">链接地址</a></p><span id="more"></span><h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>给定两种边 $stone,cement$。现有 $n$ 个节点，共有 $m$ 条<strong>不同种类</strong>的边连接，现需选择一些边，使这些节点互相连通，其中 $stone$ 边为 $K$ 条。求连接边的道路总和最小的方案。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>我们可以设某一种边全部都连接，则如果另一种边选择一部分边连接一些使这个图连通，则这些边肯定是必要的，既然是连通性问题，我们就可以用<strong>并查集</strong>解决是否连通。必要的边求出后，再考虑连通性并选择边连接，注意其中 $stone$ 边有 $K$ 条即可。</p><h1 id="边界考虑"><a href="#边界考虑" class="headerlink" title="边界考虑"></a>边界考虑</h1><p>如果求出来的 $stone$ 边的数量大于 $K$ 的数量，显然是与题意要求恰好有 $K$ 条边不符的，如果除 $cement$ 边的数量是小于 $K$ 的，则说明其 $stone$ 边的数量再怎么增加都会小于 $K$ ，即输出 no solution。</p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll N=<span class="hljs-number">2e4</span>+<span class="hljs-number">10</span>; <br>ll n,m,k,stone,cement,tot;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>ll x,y,z;<br>&#125;e[M],need[M]; <br>ll father[N];<br><span class="hljs-comment">//并查集。</span><br><span class="hljs-function">ll <span class="hljs-title">getfather</span><span class="hljs-params">(ll x)</span></span>&#123;<br><span class="hljs-keyword">return</span> x==father[x]?x:father[x]=<span class="hljs-built_in">getfather</span>(father[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(ll x,ll y)</span></span>&#123;<span class="hljs-comment">//合并。</span><br>ll fx=<span class="hljs-built_in">getfather</span>(x);<br>ll fy=<span class="hljs-built_in">getfather</span>(y);<br><span class="hljs-keyword">if</span>(fx!=fy)&#123;<br>father[fx]=fy; <br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); <br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>father[i]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>cin&gt;&gt;e[i].x&gt;&gt;e[i].y&gt;&gt;e[i].z; <br>&#125;<br>   <span class="hljs-comment">//先连接stone边</span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(!e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125;<br>   <span class="hljs-comment">//检查连通性并储存                   </span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br>cement++;<br>tot++;<br>need[tot].x=e[i].x;<br>need[tot].y=e[i].y; <br>need[tot].z=e[i].z;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>father[i]=i;<br>&#125;<br>   <span class="hljs-comment">//连接cement边                      </span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125;<br>   <span class="hljs-comment">//检查连通性并储存</span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(!e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br>stone++;<br>tot++;<br>need[tot].x=e[i].x;<br>need[tot].y=e[i].y; <br>need[tot].z=e[i].z;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125;<br>   <span class="hljs-comment">//边界考虑                      </span><br><span class="hljs-keyword">if</span>(stone&gt;k||cement&gt;n-k<span class="hljs-number">-1</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;no solution&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>father[i]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br><span class="hljs-built_in">Merge</span>(need[i].x,need[i].y);<br>&#125;<br>   <span class="hljs-comment">//stone路的连接</span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>,j=<span class="hljs-number">1</span>;j&lt;=k-stone&amp;&amp;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(!e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br>tot++; <br>j++; <br><span class="hljs-comment">//cout&lt;&lt;j&lt;&lt;endl;</span><br>need[tot].x=e[i].x;<br>need[tot].y=e[i].y;<br>need[tot].z=e[i].z;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125; <br>   <span class="hljs-comment">//cement路的连接</span><br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(e[i].z)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getfather</span>(e[i].x)!=<span class="hljs-built_in">getfather</span>(e[i].y))&#123;<br>tot++;  <br>need[tot].x=e[i].x;<br>need[tot].y=e[i].y;<br>need[tot].z=e[i].z;<br><span class="hljs-built_in">Merge</span>(e[i].x,e[i].y);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br>cout&lt;&lt;need[i].x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;need[i].y&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;need[i].z&lt;&lt;endl;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P6995 [NEERC2014] Knockout Racing 题解</title>
    <link href="/2024/01/10/Luogu-P6995-NEERC2014-Knockout-Racing-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P6995-NEERC2014-Knockout-Racing-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.com.cn/problem/P6995">题 目 链 接</a></p><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>纯暴力 $O(n^2)$ 就可以过，对于每次询问，先计算每辆车在 $t$ 秒后的所在位置，如果车是从 $a$ 点过去（即 $\displaystyle\frac{t}{b-a}$ 为偶数），所在位置就应是 $t\bmod(b-a)$，如是从 $b$ 点回来（即 $\displaystyle\frac{t}{b-a}$ 为奇数），所在位置就为 $t-t\bmod(b-a)$。再判断所在位置是否在询问的区间内即可。</p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">1010</span>,M=<span class="hljs-number">1010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>ll a,b;<br>&#125;e[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">qu</span>&#123;<br>ll x,y,t;<br>&#125;ques[M];<br>ll n,m; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;e[i].a&gt;&gt;e[i].b;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>cin&gt;&gt;ques[i].x&gt;&gt;ques[i].y&gt;&gt;ques[i].t;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>ll difference=e[j].b-e[j].a;<span class="hljs-comment">//a,b两端点距离 </span><br>ll to_back=ques[i].t/difference;<span class="hljs-comment">//往返次数 </span><br>ll meter=e[j].a+(to_back%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>?ques[i].t%difference:difference-ques[i].t%difference);<span class="hljs-comment">//所在位置</span><br><span class="hljs-keyword">if</span>(meter&gt;=ques[i].x&amp;&amp;ques[i].y&gt;=meter) &#123;<br>ans++;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces CF896C Willem, Chtholly and Seniorious 详解</title>
    <link href="/2024/01/10/Codeforces-CF896C-Willem-Chtholly-and-Seniorious-%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/01/10/Codeforces-CF896C-Willem-Chtholly-and-Seniorious-%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>一道模板题。</p><p><a href="https://www.luogu.com.cn/problem/CF896C">传送门</a></p><span id="more"></span><h1 id="关于珂朵莉树"><a href="#关于珂朵莉树" class="headerlink" title="关于珂朵莉树"></a>关于珂朵莉树</h1><h2 id="1-你需要知道以下内容"><a href="#1-你需要知道以下内容" class="headerlink" title="1.你需要知道以下内容"></a>1.你需要知道以下内容</h2><ul><li>关于 <code>set</code> 的部分知识</li></ul><h2 id="2-什么是珂朵莉树"><a href="#2-什么是珂朵莉树" class="headerlink" title="2.什么是珂朵莉树"></a>2.什么是珂朵莉树</h2><p>一种<strong>暴力</strong>数据结构，适用于随机生成的数据结构题以及<strong>骗分</strong>，主要有两种操作。</p><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>{<br>ll l,r;<span class="hljs-comment">//左、右端点</span><br><span class="hljs-keyword">mutable</span> ll v;<br><span class="hljs-built_in">node</span>(ll l,ll r=<span class="hljs-number">0</span>,ll v=<span class="hljs-number">0</span>):<span class="hljs-built_in">l</span>(l),<span class="hljs-built_in">r</span>(r),<span class="hljs-built_in">v</span>(v) {} <br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> node &amp;a) <span class="hljs-type">const</span>{<br><span class="hljs-keyword">return</span> l&lt;a.l; <span class="hljs-comment">//根据左端点进行排序</span><br>} <br>}; <br></code></pre></td></tr></table></figure><p>在这段代码中，我们用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 451 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 变量储存当前区间的左端点和右端点。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 是所需要储存的内容，注意到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 前有关键字 <code>mutable</code>。意思是“可变的”，因为 <code>set</code> 中储存的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 是一个常量，如果不加这个关键字会报错 <code>error:cannot assign to return value because function 'operator-&gt;' returns a const value</code>。</p><p>然后，我们用一个 <code>set</code> 来进行维护，为了后面的操作，我们会根据左端点来进行排序。最终维护下来就是下图所展示的。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/tx535itn.png" alt="odt1"></p><h2 id="4-split-操作"><a href="#4-split-操作" class="headerlink" title="4. split 操作"></a>4. split 操作</h2><p>当一段区间需要被分开时，我们就需要 <code>split</code> 操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;node&gt;::<span class="hljs-function">iterator <span class="hljs-title">split</span><span class="hljs-params">(ll pos)</span></span>{<br>set&lt;node&gt;::iterator it=s.<span class="hljs-built_in">lower_bound</span>(<span class="hljs-built_in">node</span>(pos));<br><span class="hljs-keyword">if</span>(it!=s.<span class="hljs-built_in">end</span>()&amp;&amp;(it-&gt;l)==pos){<br><span class="hljs-keyword">return</span> it;<br>}<br>it--;<br>ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;<br><span class="hljs-keyword">if</span>(r&lt;pos)<span class="hljs-keyword">return</span> s.<span class="hljs-built_in">end</span>();<br>s.<span class="hljs-built_in">erase</span>(it);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(l,pos<span class="hljs-number">-1</span>,v));<br><span class="hljs-keyword">return</span> s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(pos,r,v)).first;<br>}<br></code></pre></td></tr></table></figure><p>在此前，我们对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container> 端点进行了排序，所以我们就可以二分查找 <code>pos</code> 所在的区间，再将这个区间分割为 <code>[l,pos-1]</code> 和 <code>[pos,r]</code> 两个区间。如果说 <code>pos</code> 正好在这段区间的开头的话，显然易见就不用分割了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1ge627vx.png" alt="odt2"></p><h2 id="5-assign-操作"><a href="#5-assign-操作" class="headerlink" title="5. assign 操作"></a>5. assign 操作</h2><p>当一段区间需要合并时，我们就需要 <code>assign</code> 操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(ll l,ll r,ll v)</span></span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br>s.<span class="hljs-built_in">erase</span>(itl,itr);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(l,r,v));<br>}<br></code></pre></td></tr></table></figure><p>在这个操作中，我们先将 <code>[l,r]</code> 区间分割出来，<code>erase</code> 将 <code>[l,r]</code> 区间都给清空了，然后再插入一段新的区间，值为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yj4gwn8t.png" alt="odt3"></p><h1 id="关于本题的分析"><a href="#关于本题的分析" class="headerlink" title="关于本题的分析"></a>关于本题的分析</h1><h2 id="1-操作"><a href="#1-操作" class="headerlink" title="1 操作"></a>1 操作</h2><p>将区间 <code>[l,r]</code> 的值全部增加 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>，只需要暴力将 <code>[l,r]</code> 内所有的区间的值都增加 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 即可。（这也是为什么要有 <code>mutable</code> 的原因）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll l,ll r,ll x)</span> </span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>(it-&gt;v)+=x;<br>}<br>}<br></code></pre></td></tr></table></figure><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><p>就是 <code>assign</code> 操作。</p><h2 id="3-操作"><a href="#3-操作" class="headerlink" title="3 操作"></a>3 操作</h2><p>将区间 <code>[l,r]</code> 内的所有区间的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 值排序，记录多少个，然后枚举到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 个为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node2</span> {<span class="hljs-comment">//排序所用的结构体</span><br>ll v,cnt;<br><span class="hljs-built_in">node2</span>(ll v,ll cnt):<span class="hljs-built_in">v</span>(v),<span class="hljs-built_in">cnt</span>(cnt) {}<br>};<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node2 a,node2 b)</span> </span>{<br><span class="hljs-keyword">return</span> a.v&lt;b.v;<br>}<br><span class="hljs-function">ll <span class="hljs-title">search</span><span class="hljs-params">(ll l,ll r,ll x)</span> </span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br>vector&lt;node2&gt;v;<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">node2</span>(it-&gt;v,(it-&gt;r)-(it-&gt;l)+<span class="hljs-number">1</span>));<br>}<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),cmp);<br>ll i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;v.<span class="hljs-built_in">size</span>(); i++) {<span class="hljs-comment">//从小到大枚举</span><br><span class="hljs-keyword">if</span>(v[i].cnt&lt;x)x-=v[i].cnt;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>}<br><span class="hljs-keyword">return</span> v[i].v;<br>}<br></code></pre></td></tr></table></figure><h2 id="4-操作"><a href="#4-操作" class="headerlink" title="4 操作"></a>4 操作</h2><p>答案就为区间 <code>[l,r]</code> 内所有区间的值的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 次方再乘上区间长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a_,ll n_,ll p_)</span> </span>{<br>ll ans_=<span class="hljs-number">1</span>;<br>a_%=p_;<br><span class="hljs-keyword">while</span>(n_) {<br><span class="hljs-keyword">if</span>(n_&amp;<span class="hljs-number">1</span>)ans_=ans_*a_%p_;<br>n_/=<span class="hljs-number">2</span>;<br>a_=a_*a_%p_;<br>}<br><span class="hljs-keyword">return</span> ans_;<br>}<br><span class="hljs-function">ll <span class="hljs-title">getans_pow</span><span class="hljs-params">(ll l,ll r,ll x,ll y)</span> </span>{<br>ll ans_=<span class="hljs-number">0</span>;<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>ans_+=(<span class="hljs-built_in">qpow</span>(it-&gt;v,x,y)*(((it-&gt;r)-(it-&gt;l)+<span class="hljs-number">1</span>)%y))%y;<span class="hljs-comment">//区间长度乘区间值的 x 次方</span><br>ans_%=y;<br>}<br><span class="hljs-keyword">return</span> ans_%y;<br>}<br></code></pre></td></tr></table></figure><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>在分割区间时，要先分割右边，在分割左边，也就是先 <code>split(r+1)</code>，再 <code>split(l)</code>。不然顺序不对在分割时可能会找不到分割区间。</p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll unsigned long long</span><br><span class="hljs-type">const</span> ll P=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> ll N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,m,seed,vmax;<br><span class="hljs-function">ll <span class="hljs-title">rnd</span><span class="hljs-params">()</span> </span>{<br>ll seedd=seed;<br>seed=(seed*<span class="hljs-number">7</span>+<span class="hljs-number">13</span>)%P;<br><span class="hljs-keyword">return</span> seedd;<br>}<br>ll a[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">question</span> {<br>ll op,l,r,x,y;<br>} q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">random_</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n; i++) {<br>a[i]=(<span class="hljs-built_in">rnd</span>()%vmax)+<span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=m; i++) {<br>q[i].op=(<span class="hljs-built_in">rnd</span>()%<span class="hljs-number">4</span>)+<span class="hljs-number">1</span>;<br>q[i].l=(<span class="hljs-built_in">rnd</span>()%n)+<span class="hljs-number">1</span>;<br>q[i].r=(<span class="hljs-built_in">rnd</span>()%n)+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(q[i].l&gt;q[i].r) {<br><span class="hljs-built_in">swap</span>(q[i].l,q[i].r);<br>}<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">3</span>) {<br>q[i].x=(<span class="hljs-built_in">rnd</span>()%(q[i].r-q[i].l+<span class="hljs-number">1</span>))+<span class="hljs-number">1</span>;<br>} <span class="hljs-keyword">else</span> {<br>q[i].x=(<span class="hljs-built_in">rnd</span>()%vmax)+<span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">4</span>) {<br>q[i].y=(<span class="hljs-built_in">rnd</span>()%vmax)+<span class="hljs-number">1</span>;<br>}<br>}<br>}<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> {<br>ll l,r;<br><span class="hljs-keyword">mutable</span> ll v;<br><span class="hljs-built_in">node</span>(ll l,ll r=<span class="hljs-number">0</span>,ll v=<span class="hljs-number">0</span>):<span class="hljs-built_in">l</span>(l),<span class="hljs-built_in">r</span>(r),<span class="hljs-built_in">v</span>(v) {}<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> node &amp;a) <span class="hljs-type">const</span> {<br><span class="hljs-keyword">return</span> l&lt;a.l;<br>}<br>};<br>set&lt;node&gt;s;<br>set&lt;node&gt;::<span class="hljs-function">iterator <span class="hljs-title">split</span><span class="hljs-params">(ll pos)</span> </span>{<br>set&lt;node&gt;::iterator it=s.<span class="hljs-built_in">lower_bound</span>(<span class="hljs-built_in">node</span>(pos));;<br><span class="hljs-keyword">if</span>(it!=s.<span class="hljs-built_in">end</span>()&amp;&amp;(it-&gt;l)==pos) {<br><span class="hljs-keyword">return</span> it;<br>}<br>it--;<br>ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;<br><span class="hljs-keyword">if</span>(r&lt;pos)<span class="hljs-keyword">return</span> s.<span class="hljs-built_in">end</span>();<br>s.<span class="hljs-built_in">erase</span>(it);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(l,pos<span class="hljs-number">-1</span>,v));<br><span class="hljs-keyword">return</span> s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(pos,r,v)).first;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(ll l,ll r,ll x)</span> </span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);;<br>s.<span class="hljs-built_in">erase</span>(itl,itr);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(l,r,x));<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll l,ll r,ll x)</span> </span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>(it-&gt;v)+=x;<br>}<br>}<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node2</span> {<br>ll v,cnt;<br><span class="hljs-built_in">node2</span>(ll v,ll cnt):<span class="hljs-built_in">v</span>(v),<span class="hljs-built_in">cnt</span>(cnt) {}<br>};<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node2 a,node2 b)</span> </span>{<br><span class="hljs-keyword">return</span> a.v&lt;b.v;<br>}<br><span class="hljs-function">ll <span class="hljs-title">search</span><span class="hljs-params">(ll l,ll r,ll x)</span> </span>{<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br>vector&lt;node2&gt;v;<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">node2</span>(it-&gt;v,(it-&gt;r)-(it-&gt;l)+<span class="hljs-number">1</span>));<br>}<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),cmp);<br>ll i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;v.<span class="hljs-built_in">size</span>(); i++) {<br><span class="hljs-keyword">if</span>(v[i].cnt&lt;x)x-=v[i].cnt;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>}<br><span class="hljs-keyword">return</span> v[i].v;<br>}<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a_,ll n_,ll p_)</span> </span>{<br>ll ans_=<span class="hljs-number">1</span>;<br>a_%=p_;<br><span class="hljs-keyword">while</span>(n_) {<br><span class="hljs-keyword">if</span>(n_&amp;<span class="hljs-number">1</span>)ans_=ans_*a_%p_;<br>n_/=<span class="hljs-number">2</span>;<br>a_=a_*a_%p_;<br>}<br><span class="hljs-keyword">return</span> ans_;<br>}<br><span class="hljs-function">ll <span class="hljs-title">getans_pow</span><span class="hljs-params">(ll l,ll r,ll x,ll y)</span> </span>{<br>ll ans_=<span class="hljs-number">0</span>;<br>set&lt;node&gt;::iterator itr=<span class="hljs-built_in">split</span>(r+<span class="hljs-number">1</span>),itl=<span class="hljs-built_in">split</span>(l);<br><span class="hljs-keyword">for</span>(set&lt;node&gt;::iterator it=itl; it!=itr; it++) {<br>ans_+=(<span class="hljs-built_in">qpow</span>(it-&gt;v,x,y)*(((it-&gt;r)-(it-&gt;l)+<span class="hljs-number">1</span>)%y))%y;<br>ans_%=y;<br>}<br><span class="hljs-keyword">return</span> ans_%y;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;<br><span class="hljs-built_in">random_</span>();<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n; i++) {<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">node</span>(i,i,a[i]));<br>}<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=m; i++) {<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">1</span>) {<br><span class="hljs-built_in">add</span>(q[i].l,q[i].r,q[i].x);<br>}<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">2</span>) {<br><span class="hljs-built_in">assign</span>(q[i].l,q[i].r,q[i].x);<br>}<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">3</span>) {<br>cout&lt;&lt;<span class="hljs-built_in">search</span>(q[i].l,q[i].r,q[i].x)&lt;&lt;endl;<br>}<br><span class="hljs-keyword">if</span>(q[i].op==<span class="hljs-number">4</span>) {<br>cout&lt;&lt;(<span class="hljs-built_in">getans_pow</span>(q[i].l,q[i].r,q[i].x,q[i].y)+q[i].y)%q[i].y&lt;&lt;endl;<br>}<br>}<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P3736 [HAOI2016] 字符合并 题解</title>
    <link href="/2024/01/10/Luogu-P3736-HAOI2016-%E5%AD%97%E7%AC%A6%E5%90%88%E5%B9%B6-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P3736-HAOI2016-%E5%AD%97%E7%AC%A6%E5%90%88%E5%B9%B6-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><p><a href="https://www.luogu.com.cn/problem/P3736">传送门</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目要求一段数<strong>合并</strong>后的最大分数，看到合并，且 $n$ 的范围才 $300$，自然的想到复杂度 $O(n^3)$ 的区间 dp。</p><p>注意到 $k$ 的范围很小，我们就可以想到复杂度为 $O(2^k)$ 状压，状压字符当前的状态。</p><span id="more"></span><p>结合起来，$dp_{i,j,s}$ 表示区间 <code>[i,j]</code> 合并后状态为 $s$，有 $O(n^3 2^k)$ 的暴力，显然易见会超时，这时我们就要找合并的性质。</p><p>不妨假设一段长度为 $t$ 的 <code>01</code> 序列，显然易见，当 $t = k$ 时，合并次数为 $1$。</p><p>假设合并完一次后，得到的长度为 $1$，如果再想合并一次，就要让合并完后的长度 $1$ 加上另一端区间的长度 $t_1$ 的和为 $k$，那显然 $t_1 = k-1$。合并后的长度为 $1$。</p><p>然后，再合并一次，那么 $t_2 = k-1$。合并后的长度仍为 $1$。</p><p>显然，如果继续合并，那么会有无数个 $k-1$ 被合并，那么就有 $t_n = k-1$，那么能够合并为长度为 $1$ 的区间的原长度就为 $\sum \limits_{i = 1}^{n}{t_i}+1 \to n(k-1) + 1$。</p><p>扩展一下，如果一个字符串长度为 $l_1$，合并后的长度为 $l_2$，那么根据上述方程，就有合并后的长度 $l_2 = (l_1 - 1) \bmod (k-1) + 1$，于是枚举 $l$ 的时候就不用每个都枚举，每次从右往左依次减去 $k-1$。</p><p>所以显然易见 dp 方程就为：</p><script type="math/tex; mode=display">\begin{cases}  dp_{i,j,2s} = \max \limits_{i \le l < j,(j - 1 - l)\bmod( k - 1) = 0} \{ dp_{i,l,s} + dp_{l+1,j,0} \} \\  dp_{i,j,(2s) \vee 1} = \max \limits_{i \le l < j,(j - 1 - l)\bmod( k - 1) = 0} \{ dp_{i,l,s} + dp_{l+1,j,1} \}\end{cases}</script><p>特别的，当一段区间合并后的长度为 $1$ 时，可以将所有的状态合并为一个字符，也就是：</p><script type="math/tex; mode=display">\begin{cases}  dp_{i,j,0} = \max \limits_{0 \le s \le 2^k-1,r_s = 0}\{dp_{i,j,s}+w_s\} \\  dp_{i,j,1} = \max \limits_{0 \le s \le 2^k-1,r_s = 1}\{dp_{i,j,s}+w_s\} \end{cases}</script><p>这里的 $r_s$ 表示状态为 $s$ 的字符串合并后的答案，$w_s$ 表示合并得到的分数，注意要开辅助数组储存。</p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">310</span>;<br><span class="hljs-type">const</span> ll K=<span class="hljs-number">7</span>;<br><span class="hljs-type">bool</span> sum[N];<br><span class="hljs-function">ll <span class="hljs-title">getsum</span><span class="hljs-params">(ll i,ll j)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&gt;j)<span class="hljs-built_in">swap</span>(i,j);<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ll k=j,q=<span class="hljs-number">0</span>; k&gt;=i; k--,q++) &#123;<br>ans+=(sum[k])*(<span class="hljs-number">1</span>&lt;&lt;q);<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">wes</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> ll x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">32</span>-__builtin_clz(x);<br>&#125;<br><span class="hljs-comment">//调试 </span><br>ll n,kk;<br>ll dp[N][N][<span class="hljs-number">1</span>&lt;&lt;(K+<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>];<br>ll str[<span class="hljs-number">1</span>&lt;&lt;(K+<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>];<br><span class="hljs-type">bool</span> tr[(<span class="hljs-number">1</span>&lt;&lt;(K+<span class="hljs-number">1</span>))|<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin&gt;&gt;n&gt;&gt;kk;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>; j&lt;=n; j++) &#123;<br><span class="hljs-keyword">for</span>(ll s=(<span class="hljs-number">1</span>&lt;&lt;kk)<span class="hljs-number">-1</span>; s&gt;=<span class="hljs-number">0</span>; s--) &#123;<br>dp[i][j][s]=<span class="hljs-number">-1145141919810ll</span>;<span class="hljs-comment">//初始化 </span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br>cin&gt;&gt;sum[i];<br>dp[i][i][sum[i]]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=(<span class="hljs-number">1</span>&lt;&lt;kk); i++) &#123;<br>cin&gt;&gt;tr[i<span class="hljs-number">-1</span>]&gt;&gt;str[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-keyword">for</span>(ll k=<span class="hljs-number">2</span>; k&lt;=n; k++) &#123;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>; i&lt;=n-k+<span class="hljs-number">1</span>; i++) &#123;<br>ll j=i+k<span class="hljs-number">-1</span>;<br>ll sizee=(k<span class="hljs-number">-1</span>)%(kk<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(sizee==<span class="hljs-number">0</span>) &#123;<br>sizee=kk<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ll l=j<span class="hljs-number">-1</span>; l&gt;=i; l-=(kk<span class="hljs-number">-1</span>)) &#123;<br><span class="hljs-keyword">for</span>(ll s=(<span class="hljs-number">1</span>&lt;&lt;(sizee))<span class="hljs-number">-1</span>; s&gt;=<span class="hljs-number">0</span>; s--) &#123;<br>dp[i][j][s&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i][j][s&lt;&lt;<span class="hljs-number">1</span>],dp[i][l][s]+dp[l+<span class="hljs-number">1</span>][j][<span class="hljs-number">0</span>]);<br>dp[i][j][s&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i][j][s&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],dp[i][l][s]+dp[l+<span class="hljs-number">1</span>][j][<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(sizee==kk<span class="hljs-number">-1</span>) &#123;<span class="hljs-comment">//合并后的长度为1</span><br>ll r[<span class="hljs-number">2</span>];<br>r[<span class="hljs-number">0</span>]=r[<span class="hljs-number">1</span>]=<span class="hljs-number">-1145141919810ll</span>;<br><span class="hljs-keyword">for</span>(ll s=(<span class="hljs-number">1</span>&lt;&lt;kk)<span class="hljs-number">-1</span>; s&gt;=<span class="hljs-number">0</span>; s--) &#123;<br>r[tr[s]]=<span class="hljs-built_in">max</span>(r[tr[s]],dp[i][j][s]+str[s]);<br>&#125;<br>dp[i][j][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i][j][<span class="hljs-number">0</span>],r[<span class="hljs-number">0</span>]);<br>dp[i][j][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i][j][<span class="hljs-number">1</span>],r[<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br>&#125;<br>ll ans=<span class="hljs-number">-1145141919810ll</span>;<br><span class="hljs-keyword">for</span>(ll s=(<span class="hljs-number">1</span>&lt;&lt;kk)<span class="hljs-number">-1</span>; s&gt;=<span class="hljs-number">0</span>; s--) &#123;<br>ans=<span class="hljs-built_in">max</span>(ans,dp[<span class="hljs-number">1</span>][n][s]);<span class="hljs-comment">//答案</span><br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论学习笔记1——最短路（作业表4总结）</title>
    <link href="/2024/01/10/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A84%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <url>/2024/01/10/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%88%E4%BD%9C%E4%B8%9A%E8%A1%A84%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h2><p>求全源最短路径。</p><span id="more"></span><p>流程：</p><p>设 $dp_{k,i,j}$ 为经过 $1$ 到 $k$ 点的 $i,j$ 之间的最短路，每次转移找一个新的未被转移过的点转移，则有以下转移方程：</p><script type="math/tex; mode=display">dp_{k,i,j} = dp_{k-1,i,k} + dp_{k-1,k,j}</script><p>可以滚动掉一维，设 $dp_{i,j}$ 为 $i,j$ 之间的最短路，于是就有：</p><script type="math/tex; mode=display">dp_{i,j} = \min \limits_{1 \le k \le n} \{dp_{i,k} + dp_{k,j}\}</script><p><strong>注意：顺序为 $k,i,j$，顺序可调换，循环 $6$ 次也能得出答案。</strong></p><p>时间复杂度 $O(n^3)$。</p><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>求单源最短路径。</p><p>本质：贪心+BFS+DP。</p><p>流程：</p><p>设起点为 $s$，令 $dis_i = +\infty(i \in n)$，并将 $dis_s$ 设为 $0$。</p><p>每一次，寻找 $n$ 个点中 $dis_i$ 的最小值，并用这个最小值去更新它周围的边。</p><p>正确性证明：在正权图中，以当前权值最小的点去更新其他点，令有一点去更新会更优而又不是权值最小的点，因为边权为正，他更新一个点所花的花费会大于一个更近且权值更小的点，所以应用权值更小的点去更新，矛盾，故得证。</p><p>时间复杂度 $O(n^2)$（找最小点 $O(n)$，更新 $n$ 次 $O(n)$）。</p><p>可以用优先队列来找 $dis_i$ 的最小值，时间复杂度可以优化到 $O(m \log m)$。</p><p><strong>注意：不能处理含有负权边的图。</strong></p><h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h2><p>让起点 $dis_s = 0$。对每个点进行 $n-1$ 次松弛操作，可得到关于 $s$ 的单源最短路。</p><p>正确性证明：在图 $G(V,E)$ 中，令一点 $v \neq s$ ，则到达 $v$ 的最短路至多经过 $n-1$ 个点，亦能通过 $n-1$ 次松弛（递推更新）去更新到点 $v$，得证。</p><p>时间复杂度 $O(nm)$。</p><p><strong>注意：可以处理含有负权边的图，且可以找负环。</strong></p><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p>是 Bellman-Ford 算法的优化。</p><p>由于每次松弛操作都会有很多的<strong>不必要</strong>的边被松弛，于是我们可以只松弛<strong>那些被松驰过了的点</strong>的边。</p><p>期望复杂度约为 $O(kE)$，其中 $k$ 是一个常数，但<strong>最坏</strong>复杂度为 $O(nm)$（也就是退化为 Bellman-Ford 算法）。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="C-【USACO4-1-3】Fence-Loops篱笆回路"><a href="#C-【USACO4-1-3】Fence-Loops篱笆回路" class="headerlink" title="C 【USACO4.1.3】Fence Loops篱笆回路"></a>C 【USACO4.1.3】Fence Loops篱笆回路</h2><p><a href="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2627&amp;tid=C">Link NKOJ</a> and <a href="https://www.luogu.com.cn/problem/P2738">Link Luogu</a></p><p>这个题要求最小环，首先将点给离散化出来。要找最小环，因为数据范围很小，考虑 Floyd-Warshall 算法，我们不妨正好在枚举 $k$ 的时候，因为 $dp_{i,j}$ 没有更新，所以当前的 $dp_{i,k}+dp_{k,j}$ 的路线肯定不会是 $dp_{i,j}$ 的路线（如下图），所以我们可以用 $dp_{i,j}+dp_{i,k}+dp_{k,j}$ 去更新最小环长度。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xrjvuou0.png" alt=""></p><p><a href="https://www.luogu.com.cn/record/139791257">AC code</a></p><h2 id="W-最短路"><a href="#W-最短路" class="headerlink" title="W 最短路"></a>W 最短路</h2><p><a href="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2627&amp;tid=C">Link NKOJ</a> and <a href="https://codeforces.com/problemset/problem/1163/F">Link Codeforces</a> anf <a href="https://www.luogu.com.cn/problem/CF1163F">Link Luogu</a></p><p>本题求的是在正权图 $G(V,E)$ 中，选择一条边并更新他的边权，并对于每个询问求其修改后 $1 \to n$ 的最短路。</p><p>不妨分类讨论：</p><ol><li>当这条被修改的边不在最短路上时，修改后的答案要么是原先的最短路，要么是从起点或终点到这条边的一端再从另一端出来的路径长度，因为如果我们考虑不经过这条边的路径长度，它们肯定是比原先求出的最短路要大，然后就只能考虑经过这条边。经过这条边显然最短的路径长度就是两端点到起点和终点的距离加上这条边自身的边权（如下图）。</li></ol><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/082xn1j8.png" alt=""></p><ol><li><p>如果这条边本身就在最短路上：</p><ol><li>这条边比原来的边要短，那肯定最短路就是原来的最短路减去这条边现在比以前短的长度。</li><li>这条边比原来的边要长，这个有点难考虑，我会从以下方面说明：</li></ol><ul><li><p>引理一：在正权图 $G(V,E)$ 中最短路一定是一条链。</p><p>证明：最短路因为要保证最短性，且图是正权图，不可能有 $0$ 环或负环，所以在最短路上一定不可能有环，得证。</p></li><li><p>引理二：在正权图 $G(V,E)$ 中，从起点 $s$ 出发，到达点 $t$，则路径 $s \to t$ <strong>用 dijkstra 算法找到的最短路</strong>必与其他从 $s$ 出发的路径共享一段前缀。    </p><p>证明：假设这条<strong>最短</strong>路径它的共享的前缀中间有间隔，且产生作用与原最短路相等。由于中间间隔的部分又回到了最短路上，所以更新后面的点就无须考虑。而且由于 dijkstra 算法的特性，这种两条相等的最短路的终点 $v$ 只会访问一次，而假设的情况确是两次，矛盾，得证。</p></li><li><p>引理三：令集合 $S$ 为最短路上的点的点集，则含有两个点的点集 $S’ = \{u,v\}$ 满足 $S \cap S’ = \varnothing$，满足在 $1 \to u$ 与最短路的前缀在最短路上的最后一个点和 $v \to n$ 与最短路的后缀在最短路上的最后一个点中间的最短路上的边任删一条而它的删边最短路为 $dis_{1 \to u} + dis_{u \to v} + dis_{v \to n}$，如果有多个就取最小值。        </p><p>证明：由引理二得，假设在最短路上的最后一个前缀和最后一个后缀的点分别记作 $x,y$。那么，假设有一条边 $(o,p)$ 删掉之后所根据引理三得出的答案是比正确答案更大的。那么一定有一条路径 $1 \to u_1 \to v_1 \to n$ 原来中间的最短路上的边并不经过 $(o,p)$ 但是有另一条路径使其从该路径中脱离出来并回到最短路时中间是有 $(o,p)$ 边的，并且答案肯定是最小的，那么这条路径肯定存在一条边，满足其与最短路上的前缀和后缀中间必经过 $(o,p)$，而后用其去更新答案一定比之前更优，而与之前的假设相悖，得证。</p></li><li><p>引理四：引理三中所设的 $\{u,v\}$ 可以在一条边上而引理三依旧成立。</p><p>证明：可以用引理三的证明过程来证明。</p></li></ul></li></ol><p>所以，综上所述，利用引理四，我们可以枚举每一条<strong>不在最短路上</strong>的边。然后因为其两点前后缀在同一最短路上且连续，我们可以给每条边编上号，用数据结构来维护其删掉这条边后路径长度的最小值。</p><p><a href="https://codeforces.com/problemset/submission/1163/240331475">AC code</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P4513 小白逛公园 题解~</title>
    <link href="/2024/01/10/Luogu-P4513-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P4513-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h1><ul><li><p>线段树</p></li><li><p><del>一定量的大脑</del> </p></li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.bilibili.com/video/BV1yL411K7CP/"><del>链 接 地 址 (大雾</del></a></p><p><a href="https://www.luogu.com.cn/problem/P4513">真 正 的 链 接</a></p><span id="more"></span><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>给定一段共有 $n$ 个点的线段，每个点都有一个值，现有 $m$ 次，$2$ 种操作：</p><ol><li><p>形如 $ 1\ a\ b $，求值操作，求 $[\ a ,b\ ]$ 区间内最大子序列和。</p></li><li><p>形如 $ 2\ p\ s $，修改操作，将点 $p$ 的值修改为 $s$ 。</p></li></ol><p>对于每次 $1$ 号操作，输出其区间内最大子序列和 $ans$。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><!--more--><p>如果我们用正常的方法求区间最大值，时间复杂度为 $O(N)$，显然如果执行 $m$ 次肯定会超时，我们就可以用一种高端大气时间复杂度仅为 $O(log_2N)$ 复杂度的算法：线段树。</p><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>不用多解释，上代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(ll id)</span></span>&#123;<span class="hljs-comment">//上提操作</span><br>Tree[id].sum=Tree[id*<span class="hljs-number">2</span>].sum+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum;<br>Tree[id].l1=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].sum+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l1,Tree[id*<span class="hljs-number">2</span>].l1);<span class="hljs-comment">//l1，r1作用下文会提及。</span><br>Tree[id].r1=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum+Tree[id*<span class="hljs-number">2</span>].r1,Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r1);<br>Tree[id].max=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].max,<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].max,Tree[id*<span class="hljs-number">2</span>].r1+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l1));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll id,ll l,ll r)</span></span>&#123;<span class="hljs-comment">//建树过程</span><br>Tree[id].l=l;Tree[id].r=r;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>Tree[id].max=Tree[id].l1=Tree[id].r1=Tree[id].sum=a[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br>ll mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">build</span>(id*<span class="hljs-number">2</span>,l,mid);<br><span class="hljs-built_in">build</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-built_in">up</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h2><p>既然只修改一个点的值，那肯定就用线段树的单点修改就 $OK$ 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(ll id,ll x,ll num)</span></span>&#123;<span class="hljs-comment">//单点修改</span><br><span class="hljs-keyword">if</span>(Tree[id].l==Tree[id].r)&#123;<br>Tree[id].max=Tree[id].l1=Tree[id].r1=Tree[id].sum=num;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid)<span class="hljs-built_in">change</span>(id*<span class="hljs-number">2</span>,x,num);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,x,num);<br><span class="hljs-built_in">up</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="求和操作"><a href="#求和操作" class="headerlink" title="求和操作"></a>求和操作</h2><p>枚举到一个节点时有如下几种情况：</p><ol><li>该节点位于所求区间内，返回。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(l&lt;=Tree[id].l&amp;&amp;r&gt;=Tree[id].r)&#123;<span class="hljs-comment">//位于区间内</span><br><span class="hljs-keyword">return</span> Tree[id].max;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>区间位于该节点左儿子内部，枚举该节点左儿子。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ll anss=<span class="hljs-number">-1e17</span>;<span class="hljs-comment">//答案</span><br><span class="hljs-keyword">if</span>(Tree[id*<span class="hljs-number">2</span>].l&lt;=r&amp;&amp;Tree[id*<span class="hljs-number">2</span>].r&gt;=l)anss=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">GetSum</span>(id*<span class="hljs-number">2</span>,l,r),anss);<span class="hljs-comment">//左儿子包含所求区间</span><br></code></pre></td></tr></table></figure><ol><li>区间位于该节点右儿子内部，枚举该节点右儿子。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l&lt;=r&amp;&amp;Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r&gt;=l)anss=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">GetSum</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,l,r),anss);<span class="hljs-comment">//右儿子包含所求区间</span><br></code></pre></td></tr></table></figure><ol><li>区间与左儿子，右儿子都有交集，则我们设一个节点的 $l1$ 为从左起的一段最大值， $r1$ 为从右起的一段最大值。随后可以用递归来求最大的从中间部分起左、右边部分区间和最大值，再合并求得最大值。</li></ol><h3 id="递归过程"><a href="#递归过程" class="headerlink" title="递归过程"></a>递归过程</h3><p>有两侧的递归，这里分开来讲。</p><h4 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h4><p>首先先看左儿子有如下情况：</p><ol><li><p>如果这个节点的左儿子在所要求区间的左侧要小，递归结束，代表这个节点的 $r1$ 值即是其目前递归的值，返回。</p></li><li><p>如果该节点的右儿子是被其要求区间完全覆盖（即所要求区间的左、右端点与其右儿子的左、右端点重合），则其最大值要么是其右儿子的 $r1$ 值，要么是右儿子的总和加上其左儿子的递归结果，从中取最大即可。</p></li><li><p>如果该节点的右儿子是被其要求区间覆盖（但所要求区间的左端点与其右儿子的左端点不重合，也就是说该节点的左儿子并没有包含所要求区间），递归右儿子，取其值。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">Tree_num_l</span><span class="hljs-params">(ll id,ll l)</span></span>&#123;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(l&lt;=Tree[id].l)&#123;<span class="hljs-comment">//情况1</span><br><span class="hljs-keyword">return</span> Tree[id].r1;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&lt;=mid)&#123;<span class="hljs-comment">//情况2</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r1,Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum+<span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>,l));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//情况3</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,l);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="右递归"><a href="#右递归" class="headerlink" title="右递归"></a>右递归</h4><p>和左递归差不多，不过要改点细节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">Tree_num_r</span><span class="hljs-params">(ll id,ll r)</span></span>&#123;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(r&gt;=Tree[id].r)&#123;<span class="hljs-comment">//情况1</span><br><span class="hljs-keyword">return</span> Tree[id].l1;<br>&#125;<br><span class="hljs-keyword">if</span>(r&gt;=mid)&#123;<span class="hljs-comment">//情况2</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].l1,Tree[id*<span class="hljs-number">2</span>].sum+<span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,r));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//情况3</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>,r);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>这是递归过程的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(l&lt;=Tree[id*<span class="hljs-number">2</span>].r&amp;&amp;Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l&lt;=r)&#123;<br>ll ansss=<span class="hljs-number">0</span>;<br>ansss+=<span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>,l);<br>ansss+=<span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,r);<br>anss=<span class="hljs-built_in">max</span>(ansss,anss);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">500000</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>ll l,r,l1,r1,max,sum;<br>&#125;Tree[<span class="hljs-number">16</span>*N];<br>ll a[N],n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(ll id)</span></span>&#123;<span class="hljs-comment">//上提操作</span><br>Tree[id].sum=Tree[id*<span class="hljs-number">2</span>].sum+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum;<br>Tree[id].l1=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].sum+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l1,Tree[id*<span class="hljs-number">2</span>].l1);<span class="hljs-comment">//l1，r1作用下文会提及。</span><br>Tree[id].r1=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum+Tree[id*<span class="hljs-number">2</span>].r1,Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r1);<br>Tree[id].max=<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].max,<span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].max,Tree[id*<span class="hljs-number">2</span>].r1+Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l1));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll id,ll l,ll r)</span></span>&#123;<span class="hljs-comment">//建树过程</span><br>Tree[id].l=l;Tree[id].r=r;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>Tree[id].max=Tree[id].l1=Tree[id].r1=Tree[id].sum=a[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br>ll mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">build</span>(id*<span class="hljs-number">2</span>,l,mid);<br><span class="hljs-built_in">build</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-built_in">up</span>(id);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(ll id,ll x,ll num)</span></span>&#123;<span class="hljs-comment">//单点修改</span><br><span class="hljs-keyword">if</span>(Tree[id].l==Tree[id].r)&#123;<br>Tree[id].max=Tree[id].l1=Tree[id].r1=Tree[id].sum=num;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid)<span class="hljs-built_in">change</span>(id*<span class="hljs-number">2</span>,x,num);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,x,num);<br><span class="hljs-built_in">up</span>(id);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">Tree_num_l</span><span class="hljs-params">(ll id,ll l)</span></span>&#123;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(l&lt;=Tree[id].l)&#123;<span class="hljs-comment">//情况1</span><br><span class="hljs-keyword">return</span> Tree[id].r1;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&lt;=mid)&#123;<span class="hljs-comment">//情况2</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r1,Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].sum+<span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>,l));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//情况3</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,l);<br>&#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">Tree_num_r</span><span class="hljs-params">(ll id,ll r)</span></span>&#123;<br>ll mid=(Tree[id].l+Tree[id].r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(r&gt;=Tree[id].r)&#123;<span class="hljs-comment">//情况1</span><br><span class="hljs-keyword">return</span> Tree[id].l1;<br>&#125;<br><span class="hljs-keyword">if</span>(r&gt;=mid)&#123;<span class="hljs-comment">//情况2</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(Tree[id*<span class="hljs-number">2</span>].l1,Tree[id*<span class="hljs-number">2</span>].sum+<span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,r));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//情况3</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>,r);<br>&#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">GetSum</span><span class="hljs-params">(ll id,ll l,ll r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l&lt;=Tree[id].l&amp;&amp;r&gt;=Tree[id].r)&#123;<br><br>ll ansss=Tree[id].max;<br><span class="hljs-keyword">return</span> ansss;<br>&#125;<br>ll anss=<span class="hljs-number">-1e17</span>;<br><span class="hljs-keyword">if</span>(Tree[id*<span class="hljs-number">2</span>].l&lt;=r&amp;&amp;Tree[id*<span class="hljs-number">2</span>].r&gt;=l)anss=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">GetSum</span>(id*<span class="hljs-number">2</span>,l,r),anss);<br><span class="hljs-keyword">if</span>(Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l&lt;=r&amp;&amp;Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].r&gt;=l)anss=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">GetSum</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,l,r),anss);<br><span class="hljs-keyword">if</span>(l&lt;=Tree[id*<span class="hljs-number">2</span>].r&amp;&amp;Tree[id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].l&lt;=r)&#123;<br>ll ansss=<span class="hljs-number">0</span>;<br>ansss+=<span class="hljs-built_in">Tree_num_l</span>(id*<span class="hljs-number">2</span>,l);<br>ansss+=<span class="hljs-built_in">Tree_num_r</span>(id*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,r);<br>anss=<span class="hljs-built_in">max</span>(ansss,anss);<br>&#125;<br><span class="hljs-keyword">return</span> anss;<br>&#125;<br>ll x,l,r;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;a[i];<br>&#125;<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>cin&gt;&gt;x;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br>cout&lt;&lt;<span class="hljs-built_in">GetSum</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">min</span>(l,r),<span class="hljs-built_in">max</span>(l,r))&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br><span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,l,r);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.24-10.5 期间总结</title>
    <link href="/2024/01/10/9-24-10-5-%E6%9C%9F%E9%97%B4%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/10/9-24-10-5-%E6%9C%9F%E9%97%B4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="9-24-10-5-期间总结"><a href="#9-24-10-5-期间总结" class="headerlink" title="9.24 - 10.5 期间总结"></a>9.24 - 10.5 期间总结</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>深窥自己的心，而后发觉一切的奇迹在你自己。 </p><p>——<strong>培根</strong></p><span id="more"></span><h2 id="9-24-摸底考试"><a href="#9-24-摸底考试" class="headerlink" title="9.24 摸底考试"></a>9.24 摸底考试</h2><p>这可能是我 <strong>OI</strong> 生涯中经历的最糟糕的一场考试，考前时因为肚子不舒服，有点虚，加之CSP第一轮后状态直线下降，让我对这次考试有所担忧。考试中我先开了 $A$ 题，$A$ 题是一道关于位运算的题。我当时以为很水，敲了下手打高精度，以为就过了，但不曾想因为没有考虑到溢出的问题，${\color{red}WA\ (0)}$ 了。然后开了 $C$ 题，$C$ 题是构造题，构造一个相邻两数之差或和的绝对值为质数的内部元素从 $1$ 到 $n$ 的序列。当时的方向想错了，以为是通过质数表暴搜得到，但时间会超，于是我想到了个自以为还行的<strong>伪解法</strong>， 显然又 ${\color{red}WA\ (0)}$ 了。其他两道基本没想。最后的结果也<strong>爆零</strong>了。</p><h2 id="DP-1阶段-LCS-amp-LIS"><a href="#DP-1阶段-LCS-amp-LIS" class="headerlink" title="DP 1阶段 (LCS &amp; LIS)"></a>DP 1阶段 (LCS &amp; LIS)</h2><p>在摸底考后几天时间里，老师和一些同学将作业表中 $A$ 到 $E$ 题以及考试题讲述了一下，这里我见到了各种 <strong>dalao</strong> 的各种方法，让我<del>大为</del>有所震惊。随后到国庆节又是一段空窗期，老师加了很多关于 <strong>LIS</strong> 和 <strong>LCS</strong> 的题，国庆节上课前两天也讲述了后面几道题的各种解法，让我的思维深度有了质的飞跃。但我 ${\color{green} A}$ 的题还是很少，其中的 $M$ 题死活过不去，这点我也无法理解。</p><h2 id="10-5-的小测试"><a href="#10-5-的小测试" class="headerlink" title="10.5 的小测试"></a>10.5 的小测试</h2><p>赛前张老师说不希望我们爆零，于是我也为此提心吊胆，因为第一次我爆零了。考试的时候，又发生了一点小插曲，让我有点担忧。我先看了 $A$ 题，$A$ 题问纯色三角形的个数有多少。我第一时间想到了排列与组合，但想了很久也无法找到复杂度允许的算法，最后打了个 $O(n^3)$ 的暴力骗点分。结果是 ${\color{red}WA\ (30)}$。随后我开了 $B$ 题，$B$ 题有些难想，从体面上顺向思维是大概不会很轻松就想出来的，我发现反转操作是可逆的，于是我就想到从全 $0$ 给还原到图像，代码写完后算了下复杂度是 $O(n^2)$，可以过掉。结果是 ${\color{green} AC\ (100)}$。$C$ 题我当时没多想，最后才匆忙码，然后就成为全班唯一一个 ${\color{purplr} MLE\ (0)}$的人。$D$ 题原本我是推了 $dp$ 公式，最后检查时发现读错题面了，这是一个重大失误，考场上出现非常致命。所以白白挂掉，时间又不够了，最后输出 $1$ 想骗分，顺利 ${\color{red}WA\ (0)}$。总分 $130$，不能说很好，但是有所进步。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这几天的表现并不好，或许是对环境的不适应，还是对自己过多的忧虑，希望可以将状态找回。</p><p>保持自信，相信自己，你会达成你的目标的！</p>]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Luogu P1971 [NOI2011] 兔兔与蛋蛋游戏 题解</title>
    <link href="/2024/01/10/Luogu-P1971-NOI2011-%E5%85%94%E5%85%94%E4%B8%8E%E8%9B%8B%E8%9B%8B%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/01/10/Luogu-P1971-NOI2011-%E5%85%94%E5%85%94%E4%B8%8E%E8%9B%8B%E8%9B%8B%E6%B8%B8%E6%88%8F-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><p><a href="https://www.luogu.com.cn/problem/P1971">P1971 [NOI2011] 兔兔与蛋蛋游戏</a></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>对于每次移动，我们可以将它理解为空格在移动，同时有一个结论，空格的移动不可能出现环，即不重复的经过部分点，证明如下：</p><span id="more"></span><p>我们先假设空格的移动会出现环，不妨设其起点为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 905.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>，那么再设经过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 次过后回到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 905.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>，中间经过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="16.949ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 7491.4 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(905.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1350.2,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2255.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2700.4,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(3606,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(4050.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5222.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5667.3,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container> 后回到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 905.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。这个环因为是在棋盘上的，那我们就可以知道这个环的周长为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.723ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3855.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(798,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1187,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1762.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2707.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3466.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。如果格子里填的是黑棋子，那么经过偶数步我们当前必然只能走白格子，所以所设结论错误，所以空格的移动不可能出现环。</p><p>既然如此，我们也可以知道其实就是二分图博弈，就是套模板，这道题就做完了。</p><h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//二分图博弈模板</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long </span><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">80</span>; <br>ll n,m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>{<br>ll x,y,next;<br>}e[N*N*<span class="hljs-number">2</span>];<br><span class="hljs-function">ll <span class="hljs-title">gethash</span><span class="hljs-params">(ll x,ll y)</span></span>{<br><span class="hljs-keyword">return</span> (x<span class="hljs-number">-1</span>)*m+y;<br>}<br>ll tot;<br>ll link[N*N*<span class="hljs-number">2</span>];<br>ll elast[N*N*<span class="hljs-number">2</span>];<br>ll del[N*N*<span class="hljs-number">2</span>];<br>ll ans[<span class="hljs-number">1010</span>]; <br>ll rans[<span class="hljs-number">1010</span>];<br><span class="hljs-type">bool</span> visit[N*N*<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll x,ll y)</span></span>{<br>tot++;<br>e[tot].x=x;<br>e[tot].y=y;<br>e[tot].next=elast[x];<br>elast[x]=tot;<br>}<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hungarian</span><span class="hljs-params">(ll id)</span></span>{/匈牙利算法<br>ll x=id,y;<br>visit[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ll i=elast[x];i;i=e[i].next){<br>y=e[i].y;<br><span class="hljs-keyword">if</span>(visit[y]||del[y])<span class="hljs-keyword">continue</span>;<br>visit[y]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(!link[y]||<span class="hljs-built_in">hungarian</span>(link[y])){<br>link[y]=x;<br>link[x]=y;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br>ll k;<br><span class="hljs-type">char</span> Map[N][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>{<br><span class="hljs-built_in">memset</span>(visit,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(visit));<br>}<br>ll x,y;<span class="hljs-comment">//空格位置 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(ll id)</span></span>{<br>ll pointt=<span class="hljs-built_in">gethash</span>(x,y);<br>del[pointt]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(link[pointt]==<span class="hljs-number">0</span>){<br>ans[id]=<span class="hljs-number">0</span>;<br>}<br><span class="hljs-keyword">else</span>{<br>ll point2=link[pointt];<br>link[point2]=link[pointt]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">hungarian</span>(point2))ans[id]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> ans[id]=<span class="hljs-number">1</span>;<br>}<br>cin&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br><span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=m;j++){<br>cin&gt;&gt;Map[i][j];<br><span class="hljs-keyword">if</span>(Map[i][j]==<span class="hljs-string">'.'</span>){<br>x=i;<br>y=j;<br>}<br>}<br>}<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br><span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=m;j++){<br><span class="hljs-keyword">if</span>(Map[i][j]==<span class="hljs-string">'O'</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>&amp;&amp;Map[i<span class="hljs-number">-1</span>][j]==<span class="hljs-string">'O'</span>){<span class="hljs-comment">//X/.连O </span><br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j),<span class="hljs-built_in">gethash</span>(i<span class="hljs-number">-1</span>,j));<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i<span class="hljs-number">-1</span>,j),<span class="hljs-built_in">gethash</span>(i,j));<br>}<br><span class="hljs-keyword">if</span>(i!=n&amp;&amp;Map[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">'O'</span>){<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j),<span class="hljs-built_in">gethash</span>(i+<span class="hljs-number">1</span>,j));<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i+<span class="hljs-number">1</span>,j),<span class="hljs-built_in">gethash</span>(i,j));<br>}<br><span class="hljs-keyword">if</span>(j!=<span class="hljs-number">1</span>&amp;&amp;Map[i][j<span class="hljs-number">-1</span>]==<span class="hljs-string">'O'</span>){<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j),<span class="hljs-built_in">gethash</span>(i,j<span class="hljs-number">-1</span>));<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j<span class="hljs-number">-1</span>),<span class="hljs-built_in">gethash</span>(i,j));<br>}<br><span class="hljs-keyword">if</span>(j!=m&amp;&amp;Map[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">'O'</span>){<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j),<span class="hljs-built_in">gethash</span>(i,j+<span class="hljs-number">1</span>));<br><span class="hljs-built_in">add</span>(<span class="hljs-built_in">gethash</span>(i,j+<span class="hljs-number">1</span>),<span class="hljs-built_in">gethash</span>(i,j));<br>}<br>}<br>}<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br><span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=m;j++){<br><span class="hljs-keyword">if</span>(Map[i][j]!=<span class="hljs-string">'O'</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">hungarian</span>(<span class="hljs-built_in">gethash</span>(i,j));<br>}<br>}<br>cin&gt;&gt;k;<br>ll cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*k;i++){<br><span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;i&lt;&lt;endl;</span><br><span class="hljs-built_in">solve</span>(i);<br><span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;i&lt;&lt;" "&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&amp;&amp;ans[i]==<span class="hljs-number">1</span>&amp;&amp;ans[i<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>){<span class="hljs-comment">//判断是否犯错误</span><br>cnt++;<br>rans[cnt]=i/<span class="hljs-number">2</span>;<br>}<br>}<br>cout&lt;&lt;cnt&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=cnt;i++){<br>cout&lt;&lt;rans[i]&lt;&lt;endl;<br>}<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
